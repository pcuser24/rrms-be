// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/chat/repo (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package repo -destination internal/domain/chat/repo/mock.go github.com/user2410/rrms-backend/internal/domain/chat/repo Repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/user2410/rrms-backend/internal/domain/chat/dto"
	model "github.com/user2410/rrms-backend/internal/domain/chat/model"
	database "github.com/user2410/rrms-backend/internal/infrastructure/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CheckGroupMembership mocks base method.
func (m *MockRepo) CheckGroupMembership(arg0 context.Context, arg1 uuid.UUID, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGroupMembership", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGroupMembership indicates an expected call of CheckGroupMembership.
func (mr *MockRepoMockRecorder) CheckGroupMembership(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGroupMembership", reflect.TypeOf((*MockRepo)(nil).CheckGroupMembership), arg0, arg1, arg2)
}

// CreateMessage mocks base method.
func (m *MockRepo) CreateMessage(arg0 context.Context, arg1 int64, arg2 *dto.IncomingCreateMessageEvent) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockRepoMockRecorder) CreateMessage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockRepo)(nil).CreateMessage), arg0, arg1, arg2)
}

// CreateMsgroup mocks base method.
func (m *MockRepo) CreateMsgroup(arg0 context.Context, arg1 uuid.UUID, arg2 *dto.CreateMsgGroup) (*model.MsgGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMsgroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.MsgGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMsgroup indicates an expected call of CreateMsgroup.
func (mr *MockRepoMockRecorder) CreateMsgroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMsgroup", reflect.TypeOf((*MockRepo)(nil).CreateMsgroup), arg0, arg1, arg2)
}

// GetMessagesOfGroup mocks base method.
func (m *MockRepo) GetMessagesOfGroup(arg0 context.Context, arg1 int64, arg2, arg3 int32) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesOfGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesOfGroup indicates an expected call of GetMessagesOfGroup.
func (mr *MockRepoMockRecorder) GetMessagesOfGroup(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesOfGroup", reflect.TypeOf((*MockRepo)(nil).GetMessagesOfGroup), arg0, arg1, arg2, arg3)
}

// GetMsgGroupByName mocks base method.
func (m *MockRepo) GetMsgGroupByName(arg0 context.Context, arg1 uuid.UUID, arg2 string) (*model.MsgGroupExtended, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsgGroupByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.MsgGroupExtended)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsgGroupByName indicates an expected call of GetMsgGroupByName.
func (mr *MockRepoMockRecorder) GetMsgGroupByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsgGroupByName", reflect.TypeOf((*MockRepo)(nil).GetMsgGroupByName), arg0, arg1, arg2)
}

// UpdateMessage mocks base method.
func (m *MockRepo) UpdateMessage(arg0 context.Context, arg1 uuid.UUID, arg2 *database.UpdateMessageParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockRepoMockRecorder) UpdateMessage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockRepo)(nil).UpdateMessage), arg0, arg1, arg2)
}
