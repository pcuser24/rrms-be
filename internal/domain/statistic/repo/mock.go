// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/statistic/repo (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package repo -destination internal/domain/statistic/repo/mock.go github.com/user2410/rrms-backend/internal/domain/statistic/repo Repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	dto "github.com/user2410/rrms-backend/internal/domain/statistic/dto"
	database "github.com/user2410/rrms-backend/internal/infrastructure/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// GetApplicationsInMonth mocks base method.
func (m *MockRepo) GetApplicationsInMonth(arg0 context.Context, arg1 uuid.UUID, arg2 time.Time) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsInMonth", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsInMonth indicates an expected call of GetApplicationsInMonth.
func (mr *MockRepoMockRecorder) GetApplicationsInMonth(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsInMonth", reflect.TypeOf((*MockRepo)(nil).GetApplicationsInMonth), arg0, arg1, arg2)
}

// GetLeastRentedProperties mocks base method.
func (m *MockRepo) GetLeastRentedProperties(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]dto.ExtremelyRentedPropertyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeastRentedProperties", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dto.ExtremelyRentedPropertyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeastRentedProperties indicates an expected call of GetLeastRentedProperties.
func (mr *MockRepoMockRecorder) GetLeastRentedProperties(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeastRentedProperties", reflect.TypeOf((*MockRepo)(nil).GetLeastRentedProperties), arg0, arg1, arg2, arg3)
}

// GetLeastRentedUnits mocks base method.
func (m *MockRepo) GetLeastRentedUnits(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]dto.ExtremelyRentedUnitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeastRentedUnits", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dto.ExtremelyRentedUnitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeastRentedUnits indicates an expected call of GetLeastRentedUnits.
func (mr *MockRepoMockRecorder) GetLeastRentedUnits(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeastRentedUnits", reflect.TypeOf((*MockRepo)(nil).GetLeastRentedUnits), arg0, arg1, arg2, arg3)
}

// GetMaintenanceRequests mocks base method.
func (m *MockRepo) GetMaintenanceRequests(arg0 context.Context, arg1 uuid.UUID, arg2 time.Time) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaintenanceRequests", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaintenanceRequests indicates an expected call of GetMaintenanceRequests.
func (mr *MockRepoMockRecorder) GetMaintenanceRequests(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaintenanceRequests", reflect.TypeOf((*MockRepo)(nil).GetMaintenanceRequests), arg0, arg1, arg2)
}

// GetManagedPropertiesByRole mocks base method.
func (m *MockRepo) GetManagedPropertiesByRole(arg0 context.Context, arg1 uuid.UUID, arg2 string) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedPropertiesByRole", arg0, arg1, arg2)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedPropertiesByRole indicates an expected call of GetManagedPropertiesByRole.
func (mr *MockRepoMockRecorder) GetManagedPropertiesByRole(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedPropertiesByRole", reflect.TypeOf((*MockRepo)(nil).GetManagedPropertiesByRole), arg0, arg1, arg2)
}

// GetManagedUnits mocks base method.
func (m *MockRepo) GetManagedUnits(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedUnits", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedUnits indicates an expected call of GetManagedUnits.
func (mr *MockRepoMockRecorder) GetManagedUnits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedUnits", reflect.TypeOf((*MockRepo)(nil).GetManagedUnits), arg0, arg1)
}

// GetMostRentedProperties mocks base method.
func (m *MockRepo) GetMostRentedProperties(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]dto.ExtremelyRentedPropertyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRentedProperties", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dto.ExtremelyRentedPropertyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRentedProperties indicates an expected call of GetMostRentedProperties.
func (mr *MockRepoMockRecorder) GetMostRentedProperties(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRentedProperties", reflect.TypeOf((*MockRepo)(nil).GetMostRentedProperties), arg0, arg1, arg2, arg3)
}

// GetMostRentedUnits mocks base method.
func (m *MockRepo) GetMostRentedUnits(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int32) ([]dto.ExtremelyRentedUnitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRentedUnits", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dto.ExtremelyRentedUnitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRentedUnits indicates an expected call of GetMostRentedUnits.
func (mr *MockRepoMockRecorder) GetMostRentedUnits(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRentedUnits", reflect.TypeOf((*MockRepo)(nil).GetMostRentedUnits), arg0, arg1, arg2, arg3)
}

// GetOccupiedProperties mocks base method.
func (m *MockRepo) GetOccupiedProperties(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupiedProperties", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupiedProperties indicates an expected call of GetOccupiedProperties.
func (mr *MockRepoMockRecorder) GetOccupiedProperties(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupiedProperties", reflect.TypeOf((*MockRepo)(nil).GetOccupiedProperties), arg0, arg1)
}

// GetOccupiedUnits mocks base method.
func (m *MockRepo) GetOccupiedUnits(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupiedUnits", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupiedUnits indicates an expected call of GetOccupiedUnits.
func (mr *MockRepoMockRecorder) GetOccupiedUnits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupiedUnits", reflect.TypeOf((*MockRepo)(nil).GetOccupiedUnits), arg0, arg1)
}

// GetPaymentsStatistic mocks base method.
func (m *MockRepo) GetPaymentsStatistic(arg0 context.Context, arg1 uuid.UUID, arg2 dto.PaymentsStatisticQuery) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsStatistic", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsStatistic indicates an expected call of GetPaymentsStatistic.
func (mr *MockRepoMockRecorder) GetPaymentsStatistic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsStatistic", reflect.TypeOf((*MockRepo)(nil).GetPaymentsStatistic), arg0, arg1, arg2)
}

// GetPropertiesWithActiveListing mocks base method.
func (m *MockRepo) GetPropertiesWithActiveListing(arg0 context.Context, arg1 uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertiesWithActiveListing", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertiesWithActiveListing indicates an expected call of GetPropertiesWithActiveListing.
func (mr *MockRepoMockRecorder) GetPropertiesWithActiveListing(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertiesWithActiveListing", reflect.TypeOf((*MockRepo)(nil).GetPropertiesWithActiveListing), arg0, arg1)
}

// GetRecentListings mocks base method.
func (m *MockRepo) GetRecentListings(arg0 context.Context, arg1 int32) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentListings", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentListings indicates an expected call of GetRecentListings.
func (mr *MockRepoMockRecorder) GetRecentListings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentListings", reflect.TypeOf((*MockRepo)(nil).GetRecentListings), arg0, arg1)
}

// GetRentalComplaintStatistics mocks base method.
func (m *MockRepo) GetRentalComplaintStatistics(arg0 context.Context, arg1 uuid.UUID, arg2 database.RENTALCOMPLAINTSTATUS) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalComplaintStatistics", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalComplaintStatistics indicates an expected call of GetRentalComplaintStatistics.
func (mr *MockRepoMockRecorder) GetRentalComplaintStatistics(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalComplaintStatistics", reflect.TypeOf((*MockRepo)(nil).GetRentalComplaintStatistics), arg0, arg1, arg2)
}

// GetRentalPaymentArrears mocks base method.
func (m *MockRepo) GetRentalPaymentArrears(arg0 context.Context, arg1 uuid.UUID, arg2 dto.RentalPaymentStatisticQuery) ([]dto.RentalPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalPaymentArrears", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dto.RentalPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalPaymentArrears indicates an expected call of GetRentalPaymentArrears.
func (mr *MockRepoMockRecorder) GetRentalPaymentArrears(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalPaymentArrears", reflect.TypeOf((*MockRepo)(nil).GetRentalPaymentArrears), arg0, arg1, arg2)
}

// GetRentalPaymentIncomes mocks base method.
func (m *MockRepo) GetRentalPaymentIncomes(arg0 context.Context, arg1 uuid.UUID, arg2 dto.RentalPaymentStatisticQuery) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalPaymentIncomes", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalPaymentIncomes indicates an expected call of GetRentalPaymentIncomes.
func (mr *MockRepoMockRecorder) GetRentalPaymentIncomes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalPaymentIncomes", reflect.TypeOf((*MockRepo)(nil).GetRentalPaymentIncomes), arg0, arg1, arg2)
}

// GetTenantExpenditure mocks base method.
func (m *MockRepo) GetTenantExpenditure(arg0 context.Context, arg1 uuid.UUID, arg2 dto.RentalPaymentStatisticQuery) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantExpenditure", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantExpenditure indicates an expected call of GetTenantExpenditure.
func (mr *MockRepoMockRecorder) GetTenantExpenditure(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantExpenditure", reflect.TypeOf((*MockRepo)(nil).GetTenantExpenditure), arg0, arg1, arg2)
}

// GetTenantPendingPayments mocks base method.
func (m *MockRepo) GetTenantPendingPayments(arg0 context.Context, arg1 uuid.UUID, arg2 dto.RentalPaymentStatisticQuery) ([]dto.RentalPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantPendingPayments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dto.RentalPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantPendingPayments indicates an expected call of GetTenantPendingPayments.
func (mr *MockRepoMockRecorder) GetTenantPendingPayments(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantPendingPayments", reflect.TypeOf((*MockRepo)(nil).GetTenantPendingPayments), arg0, arg1, arg2)
}

// GetTotalTenantPendingPayments mocks base method.
func (m *MockRepo) GetTotalTenantPendingPayments(arg0 context.Context, arg1 uuid.UUID) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTenantPendingPayments", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTenantPendingPayments indicates an expected call of GetTotalTenantPendingPayments.
func (mr *MockRepoMockRecorder) GetTotalTenantPendingPayments(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTenantPendingPayments", reflect.TypeOf((*MockRepo)(nil).GetTotalTenantPendingPayments), arg0, arg1)
}

// GetTotalTenantsManagedByUserStatistic mocks base method.
func (m *MockRepo) GetTotalTenantsManagedByUserStatistic(arg0 context.Context, arg1 uuid.UUID, arg2 *dto.RentalStatisticQuery) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTenantsManagedByUserStatistic", arg0, arg1, arg2)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTenantsManagedByUserStatistic indicates an expected call of GetTotalTenantsManagedByUserStatistic.
func (mr *MockRepoMockRecorder) GetTotalTenantsManagedByUserStatistic(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTenantsManagedByUserStatistic", reflect.TypeOf((*MockRepo)(nil).GetTotalTenantsManagedByUserStatistic), arg0, arg1, arg2)
}

// GetTotalTenantsOfUnitStatistic mocks base method.
func (m *MockRepo) GetTotalTenantsOfUnitStatistic(arg0 context.Context, arg1 uuid.UUID) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTenantsOfUnitStatistic", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTenantsOfUnitStatistic indicates an expected call of GetTotalTenantsOfUnitStatistic.
func (mr *MockRepoMockRecorder) GetTotalTenantsOfUnitStatistic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTenantsOfUnitStatistic", reflect.TypeOf((*MockRepo)(nil).GetTotalTenantsOfUnitStatistic), arg0, arg1)
}
