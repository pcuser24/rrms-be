// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/application/repo (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package repo -destination internal/domain/application/repo/mock.go github.com/user2410/rrms-backend/internal/domain/application/repo Repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/user2410/rrms-backend/internal/domain/application/dto"
	model "github.com/user2410/rrms-backend/internal/domain/application/model"
	database "github.com/user2410/rrms-backend/internal/infrastructure/database"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockRepo) CreateApplication(arg0 context.Context, arg1 *dto.CreateApplication) (*model.ApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(*model.ApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockRepoMockRecorder) CreateApplication(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockRepo)(nil).CreateApplication), arg0, arg1)
}

// DeleteApplication mocks base method.
func (m *MockRepo) DeleteApplication(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockRepoMockRecorder) DeleteApplication(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockRepo)(nil).DeleteApplication), arg0, arg1)
}

// GetApplicationById mocks base method.
func (m *MockRepo) GetApplicationById(arg0 context.Context, arg1 int64) (*model.ApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationById", arg0, arg1)
	ret0, _ := ret[0].(*model.ApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationById indicates an expected call of GetApplicationById.
func (mr *MockRepoMockRecorder) GetApplicationById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationById", reflect.TypeOf((*MockRepo)(nil).GetApplicationById), arg0, arg1)
}

// GetApplicationsByUserId mocks base method.
func (m *MockRepo) GetApplicationsByUserId(arg0 context.Context, arg1 uuid.UUID) ([]model.ApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]model.ApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByUserId indicates an expected call of GetApplicationsByUserId.
func (mr *MockRepoMockRecorder) GetApplicationsByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByUserId", reflect.TypeOf((*MockRepo)(nil).GetApplicationsByUserId), arg0, arg1)
}

// GetApplicationsToUser mocks base method.
func (m *MockRepo) GetApplicationsToUser(arg0 context.Context, arg1 uuid.UUID) ([]model.ApplicationModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsToUser", arg0, arg1)
	ret0, _ := ret[0].([]model.ApplicationModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsToUser indicates an expected call of GetApplicationsToUser.
func (mr *MockRepoMockRecorder) GetApplicationsToUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsToUser", reflect.TypeOf((*MockRepo)(nil).GetApplicationsToUser), arg0, arg1)
}

// UpdateApplicationStatus mocks base method.
func (m *MockRepo) UpdateApplicationStatus(arg0 context.Context, arg1 int64, arg2 database.APPLICATIONSTATUS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationStatus indicates an expected call of UpdateApplicationStatus.
func (mr *MockRepoMockRecorder) UpdateApplicationStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationStatus", reflect.TypeOf((*MockRepo)(nil).UpdateApplicationStatus), arg0, arg1, arg2)
}
