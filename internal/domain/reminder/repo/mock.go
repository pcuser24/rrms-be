// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/reminder/repo (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package repo -destination internal/domain/reminder/repo/mock.go github.com/user2410/rrms-backend/internal/domain/reminder/repo Repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	dto "github.com/user2410/rrms-backend/internal/domain/reminder/dto"
	model "github.com/user2410/rrms-backend/internal/domain/reminder/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CheckOverlappingReminder mocks base method.
func (m *MockRepo) CheckOverlappingReminder(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOverlappingReminder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOverlappingReminder indicates an expected call of CheckOverlappingReminder.
func (mr *MockRepoMockRecorder) CheckOverlappingReminder(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOverlappingReminder", reflect.TypeOf((*MockRepo)(nil).CheckOverlappingReminder), arg0, arg1, arg2, arg3)
}

// CheckReminderVisibility mocks base method.
func (m *MockRepo) CheckReminderVisibility(arg0 context.Context, arg1 int64, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReminderVisibility", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReminderVisibility indicates an expected call of CheckReminderVisibility.
func (mr *MockRepoMockRecorder) CheckReminderVisibility(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReminderVisibility", reflect.TypeOf((*MockRepo)(nil).CheckReminderVisibility), arg0, arg1, arg2)
}

// CreateReminder mocks base method.
func (m *MockRepo) CreateReminder(arg0 context.Context, arg1 *dto.CreateReminder) (model.ReminderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReminder", arg0, arg1)
	ret0, _ := ret[0].(model.ReminderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReminder indicates an expected call of CreateReminder.
func (mr *MockRepoMockRecorder) CreateReminder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReminder", reflect.TypeOf((*MockRepo)(nil).CreateReminder), arg0, arg1)
}

// GetReminder mocks base method.
func (m *MockRepo) GetReminder(arg0 context.Context, arg1 int64) (model.ReminderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminder", arg0, arg1)
	ret0, _ := ret[0].(model.ReminderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminder indicates an expected call of GetReminder.
func (mr *MockRepoMockRecorder) GetReminder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminder", reflect.TypeOf((*MockRepo)(nil).GetReminder), arg0, arg1)
}

// GetRemindersOfUser mocks base method.
func (m *MockRepo) GetRemindersOfUser(arg0 context.Context, arg1 uuid.UUID, arg2 *dto.GetRemindersQuery) ([]model.ReminderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemindersOfUser", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.ReminderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemindersOfUser indicates an expected call of GetRemindersOfUser.
func (mr *MockRepoMockRecorder) GetRemindersOfUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemindersOfUser", reflect.TypeOf((*MockRepo)(nil).GetRemindersOfUser), arg0, arg1, arg2)
}

// UpdateReminder mocks base method.
func (m *MockRepo) UpdateReminder(arg0 context.Context, arg1 *dto.UpdateReminder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminder", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReminder indicates an expected call of UpdateReminder.
func (mr *MockRepoMockRecorder) UpdateReminder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminder", reflect.TypeOf((*MockRepo)(nil).UpdateReminder), arg0, arg1)
}
