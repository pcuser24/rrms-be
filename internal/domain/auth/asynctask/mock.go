// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/auth/asynctask (interfaces: TaskDistributor,TaskProcessor)
//
// Generated by this command:
//
//	mockgen -package asynctask -destination internal/domain/auth/asynctask/mock.go github.com/user2410/rrms-backend/internal/domain/auth/asynctask TaskDistributor,TaskProcessor
//

// Package asynctask is a generated GoMock package.
package asynctask

import (
	context "context"
	reflect "reflect"

	asynq "github.com/hibiken/asynq"
	dto "github.com/user2410/rrms-backend/internal/domain/auth/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskDistributor is a mock of TaskDistributor interface.
type MockTaskDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDistributorMockRecorder
}

// MockTaskDistributorMockRecorder is the mock recorder for MockTaskDistributor.
type MockTaskDistributorMockRecorder struct {
	mock *MockTaskDistributor
}

// NewMockTaskDistributor creates a new mock instance.
func NewMockTaskDistributor(ctrl *gomock.Controller) *MockTaskDistributor {
	mock := &MockTaskDistributor{ctrl: ctrl}
	mock.recorder = &MockTaskDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDistributor) EXPECT() *MockTaskDistributorMockRecorder {
	return m.recorder
}

// DistributeTaskSendVerifyEmail mocks base method.
func (m *MockTaskDistributor) DistributeTaskSendVerifyEmail(arg0 context.Context, arg1 *dto.TaskSendVerifyEmailPayload, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskSendVerifyEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeTaskSendVerifyEmail indicates an expected call of DistributeTaskSendVerifyEmail.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskSendVerifyEmail(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskSendVerifyEmail", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskSendVerifyEmail), varargs...)
}

// MockTaskProcessor is a mock of TaskProcessor interface.
type MockTaskProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskProcessorMockRecorder
}

// MockTaskProcessorMockRecorder is the mock recorder for MockTaskProcessor.
type MockTaskProcessorMockRecorder struct {
	mock *MockTaskProcessor
}

// NewMockTaskProcessor creates a new mock instance.
func NewMockTaskProcessor(ctrl *gomock.Controller) *MockTaskProcessor {
	mock := &MockTaskProcessor{ctrl: ctrl}
	mock.recorder = &MockTaskProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskProcessor) EXPECT() *MockTaskProcessorMockRecorder {
	return m.recorder
}

// ProcessTaskSendVerifyEmail mocks base method.
func (m *MockTaskProcessor) ProcessTaskSendVerifyEmail(arg0 context.Context, arg1 *asynq.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTaskSendVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTaskSendVerifyEmail indicates an expected call of ProcessTaskSendVerifyEmail.
func (mr *MockTaskProcessorMockRecorder) ProcessTaskSendVerifyEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTaskSendVerifyEmail", reflect.TypeOf((*MockTaskProcessor)(nil).ProcessTaskSendVerifyEmail), arg0, arg1)
}

// RegisterProcessor mocks base method.
func (m *MockTaskProcessor) RegisterProcessor() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterProcessor")
}

// RegisterProcessor indicates an expected call of RegisterProcessor.
func (mr *MockTaskProcessorMockRecorder) RegisterProcessor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProcessor", reflect.TypeOf((*MockTaskProcessor)(nil).RegisterProcessor))
}
