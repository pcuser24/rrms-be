// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/domain/unit/repo (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package repo -destination internal/domain/unit/repo/mock.go github.com/user2410/rrms-backend/internal/domain/unit/repo Repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/user2410/rrms-backend/internal/domain/unit/dto"
	model "github.com/user2410/rrms-backend/internal/domain/unit/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CheckUnitManageability mocks base method.
func (m *MockRepo) CheckUnitManageability(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitManageability", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnitManageability indicates an expected call of CheckUnitManageability.
func (mr *MockRepoMockRecorder) CheckUnitManageability(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitManageability", reflect.TypeOf((*MockRepo)(nil).CheckUnitManageability), arg0, arg1, arg2)
}

// CheckUnitOfProperty mocks base method.
func (m *MockRepo) CheckUnitOfProperty(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitOfProperty", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnitOfProperty indicates an expected call of CheckUnitOfProperty.
func (mr *MockRepoMockRecorder) CheckUnitOfProperty(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitOfProperty", reflect.TypeOf((*MockRepo)(nil).CheckUnitOfProperty), arg0, arg1, arg2)
}

// CreateUnit mocks base method.
func (m *MockRepo) CreateUnit(arg0 context.Context, arg1 *dto.CreateUnit) (*model.UnitModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnit", arg0, arg1)
	ret0, _ := ret[0].(*model.UnitModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnit indicates an expected call of CreateUnit.
func (mr *MockRepoMockRecorder) CreateUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnit", reflect.TypeOf((*MockRepo)(nil).CreateUnit), arg0, arg1)
}

// DeleteUnit mocks base method.
func (m *MockRepo) DeleteUnit(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockRepoMockRecorder) DeleteUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockRepo)(nil).DeleteUnit), arg0, arg1)
}

// GetUnitById mocks base method.
func (m *MockRepo) GetUnitById(arg0 context.Context, arg1 uuid.UUID) (*model.UnitModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitById", arg0, arg1)
	ret0, _ := ret[0].(*model.UnitModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitById indicates an expected call of GetUnitById.
func (mr *MockRepoMockRecorder) GetUnitById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitById", reflect.TypeOf((*MockRepo)(nil).GetUnitById), arg0, arg1)
}

// GetUnitsByIds mocks base method.
func (m *MockRepo) GetUnitsByIds(arg0 context.Context, arg1, arg2 []string) ([]model.UnitModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsByIds", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.UnitModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsByIds indicates an expected call of GetUnitsByIds.
func (mr *MockRepoMockRecorder) GetUnitsByIds(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsByIds", reflect.TypeOf((*MockRepo)(nil).GetUnitsByIds), arg0, arg1, arg2)
}

// GetUnitsOfProperty mocks base method.
func (m *MockRepo) GetUnitsOfProperty(arg0 context.Context, arg1 uuid.UUID) ([]model.UnitModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsOfProperty", arg0, arg1)
	ret0, _ := ret[0].([]model.UnitModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsOfProperty indicates an expected call of GetUnitsOfProperty.
func (mr *MockRepoMockRecorder) GetUnitsOfProperty(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsOfProperty", reflect.TypeOf((*MockRepo)(nil).GetUnitsOfProperty), arg0, arg1)
}

// IsPublic mocks base method.
func (m *MockRepo) IsPublic(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPublic", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPublic indicates an expected call of IsPublic.
func (mr *MockRepoMockRecorder) IsPublic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPublic", reflect.TypeOf((*MockRepo)(nil).IsPublic), arg0, arg1)
}

// SearchUnitCombination mocks base method.
func (m *MockRepo) SearchUnitCombination(arg0 context.Context, arg1 *dto.SearchUnitCombinationQuery) (*dto.SearchUnitCombinationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUnitCombination", arg0, arg1)
	ret0, _ := ret[0].(*dto.SearchUnitCombinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUnitCombination indicates an expected call of SearchUnitCombination.
func (mr *MockRepoMockRecorder) SearchUnitCombination(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUnitCombination", reflect.TypeOf((*MockRepo)(nil).SearchUnitCombination), arg0, arg1)
}

// UpdateUnit mocks base method.
func (m *MockRepo) UpdateUnit(arg0 context.Context, arg1 *dto.UpdateUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnit indicates an expected call of UpdateUnit.
func (mr *MockRepoMockRecorder) UpdateUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnit", reflect.TypeOf((*MockRepo)(nil).UpdateUnit), arg0, arg1)
}
