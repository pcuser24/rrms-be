// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/user2410/rrms-backend/internal/infrastructure/aws/s3 (interfaces: S3Client)
//
// Generated by this command:
//
//	mockgen -package s3 -destination internal/infrastructure/aws/s3/s3_mock.go github.com/user2410/rrms-backend/internal/infrastructure/aws/s3 S3Client
//

// Package s3 is a generated GoMock package.
package s3

import (
	reflect "reflect"
	time "time"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	types "github.com/aws/aws-sdk-go-v2/service/s3/types"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockS3Client) BucketExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockS3ClientMockRecorder) BucketExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockS3Client)(nil).BucketExists), arg0)
}

// CreateBucket mocks base method.
func (m *MockS3Client) CreateBucket(arg0, arg1 string) (*s3.CreateBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", arg0, arg1)
	ret0, _ := ret[0].(*s3.CreateBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockS3ClientMockRecorder) CreateBucket(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockS3Client)(nil).CreateBucket), arg0, arg1)
}

// DeleteBucket mocks base method.
func (m *MockS3Client) DeleteBucket(arg0 string) (*s3.DeleteBucketOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", arg0)
	ret0, _ := ret[0].(*s3.DeleteBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockS3ClientMockRecorder) DeleteBucket(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockS3Client)(nil).DeleteBucket), arg0)
}

// DeleteObjects mocks base method.
func (m *MockS3Client) DeleteObjects(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockS3ClientMockRecorder) DeleteObjects(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockS3Client)(nil).DeleteObjects), arg0, arg1)
}

// DownloadFile mocks base method.
func (m *MockS3Client) DownloadFile(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockS3ClientMockRecorder) DownloadFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockS3Client)(nil).DownloadFile), arg0, arg1, arg2)
}

// GetPutObjectPresignedURL mocks base method.
func (m *MockS3Client) GetPutObjectPresignedURL(arg0, arg1, arg2 string, arg3 int64, arg4 time.Duration) (*v4.PresignedHTTPRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPutObjectPresignedURL", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*v4.PresignedHTTPRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPutObjectPresignedURL indicates an expected call of GetPutObjectPresignedURL.
func (mr *MockS3ClientMockRecorder) GetPutObjectPresignedURL(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPutObjectPresignedURL", reflect.TypeOf((*MockS3Client)(nil).GetPutObjectPresignedURL), arg0, arg1, arg2, arg3, arg4)
}

// ListObjects mocks base method.
func (m *MockS3Client) ListObjects(arg0 string) ([]types.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0)
	ret0, _ := ret[0].([]types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockS3ClientMockRecorder) ListObjects(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockS3Client)(nil).ListObjects), arg0)
}

// UploadLargeObject mocks base method.
func (m *MockS3Client) UploadLargeObject(arg0, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadLargeObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadLargeObject indicates an expected call of UploadLargeObject.
func (mr *MockS3ClientMockRecorder) UploadLargeObject(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLargeObject", reflect.TypeOf((*MockS3Client)(nil).UploadLargeObject), arg0, arg1, arg2)
}
