// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: property.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkPropertyOwnerShip = `-- name: CheckPropertyOwnerShip :one
SELECT count(*) FROM properties WHERE id = $1 AND owner_id = $2 LIMIT 1
`

type CheckPropertyOwnerShipParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) CheckPropertyOwnerShip(ctx context.Context, arg CheckPropertyOwnerShipParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPropertyOwnerShip, arg.ID, arg.OwnerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProperty = `-- name: CreateProperty :one
INSERT INTO properties (
  owner_id,
  name,
  area,
  number_of_floors,
  year_built,
  orientation,
  full_address,
  district,
  city,
  lat,
  lng,
  type,
  created_at,
  updated_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  NOW(),
  NOW()
) RETURNING id, owner_id, name, area, number_of_floors, year_built, orientation, full_address, district, city, lat, lng, type, created_at, updated_at
`

type CreatePropertyParams struct {
	OwnerID        uuid.UUID      `json:"owner_id"`
	Name           sql.NullString `json:"name"`
	Area           float32        `json:"area"`
	NumberOfFloors sql.NullInt32  `json:"number_of_floors"`
	YearBuilt      sql.NullInt32  `json:"year_built"`
	Orientation    sql.NullString `json:"orientation"`
	FullAddress    string         `json:"full_address"`
	District       string         `json:"district"`
	City           string         `json:"city"`
	Lat            float64        `json:"lat"`
	Lng            float64        `json:"lng"`
	Type           PROPERTYTYPE   `json:"type"`
}

func (q *Queries) CreateProperty(ctx context.Context, arg CreatePropertyParams) (Property, error) {
	row := q.db.QueryRowContext(ctx, createProperty,
		arg.OwnerID,
		arg.Name,
		arg.Area,
		arg.NumberOfFloors,
		arg.YearBuilt,
		arg.Orientation,
		arg.FullAddress,
		arg.District,
		arg.City,
		arg.Lat,
		arg.Lng,
		arg.Type,
	)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Area,
		&i.NumberOfFloors,
		&i.YearBuilt,
		&i.Orientation,
		&i.FullAddress,
		&i.District,
		&i.City,
		&i.Lat,
		&i.Lng,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPropertyAmenity = `-- name: CreatePropertyAmenity :one
INSERT INTO property_amenity (
  property_id,
  amenity
) VALUES (
  $1,
  $2
) RETURNING property_id, amenity, description
`

type CreatePropertyAmenityParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Amenity    string    `json:"amenity"`
}

func (q *Queries) CreatePropertyAmenity(ctx context.Context, arg CreatePropertyAmenityParams) (PropertyAmenity, error) {
	row := q.db.QueryRowContext(ctx, createPropertyAmenity, arg.PropertyID, arg.Amenity)
	var i PropertyAmenity
	err := row.Scan(&i.PropertyID, &i.Amenity, &i.Description)
	return i, err
}

const createPropertyFeature = `-- name: CreatePropertyFeature :one
INSERT INTO property_feature (
  property_id,
  feature
) VALUES (
  $1,
  $2
) RETURNING property_id, feature, description
`

type CreatePropertyFeatureParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Feature    string    `json:"feature"`
}

func (q *Queries) CreatePropertyFeature(ctx context.Context, arg CreatePropertyFeatureParams) (PropertyFeature, error) {
	row := q.db.QueryRowContext(ctx, createPropertyFeature, arg.PropertyID, arg.Feature)
	var i PropertyFeature
	err := row.Scan(&i.PropertyID, &i.Feature, &i.Description)
	return i, err
}

const createPropertyMedia = `-- name: CreatePropertyMedia :one
INSERT INTO property_media (
  property_id,
  url,
  type
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, property_id, url, type
`

type CreatePropertyMediaParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Url        string    `json:"url"`
	Type       MEDIATYPE `json:"type"`
}

func (q *Queries) CreatePropertyMedia(ctx context.Context, arg CreatePropertyMediaParams) (PropertyMedium, error) {
	row := q.db.QueryRowContext(ctx, createPropertyMedia, arg.PropertyID, arg.Url, arg.Type)
	var i PropertyMedium
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Url,
		&i.Type,
	)
	return i, err
}

const deleteProperty = `-- name: DeleteProperty :exec
DELETE FROM properties WHERE id = $1
`

func (q *Queries) DeleteProperty(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProperty, id)
	return err
}

const deletePropertyAmenity = `-- name: DeletePropertyAmenity :exec
DELETE FROM property_amenity WHERE property_id = $1 AND amenity = $2
`

type DeletePropertyAmenityParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Amenity    string    `json:"amenity"`
}

func (q *Queries) DeletePropertyAmenity(ctx context.Context, arg DeletePropertyAmenityParams) error {
	_, err := q.db.ExecContext(ctx, deletePropertyAmenity, arg.PropertyID, arg.Amenity)
	return err
}

const deletePropertyFeature = `-- name: DeletePropertyFeature :exec
DELETE FROM property_feature WHERE property_id = $1 AND feature = $2
`

type DeletePropertyFeatureParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Feature    string    `json:"feature"`
}

func (q *Queries) DeletePropertyFeature(ctx context.Context, arg DeletePropertyFeatureParams) error {
	_, err := q.db.ExecContext(ctx, deletePropertyFeature, arg.PropertyID, arg.Feature)
	return err
}

const deletePropertyMedia = `-- name: DeletePropertyMedia :exec
DELETE FROM property_media WHERE property_id = $1 AND id = $2
`

type DeletePropertyMediaParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	ID         int32     `json:"id"`
}

func (q *Queries) DeletePropertyMedia(ctx context.Context, arg DeletePropertyMediaParams) error {
	_, err := q.db.ExecContext(ctx, deletePropertyMedia, arg.PropertyID, arg.ID)
	return err
}

const getPropertyAmenities = `-- name: GetPropertyAmenities :many
SELECT property_id, amenity, description FROM property_amenity WHERE property_id = $1
`

func (q *Queries) GetPropertyAmenities(ctx context.Context, propertyID uuid.UUID) ([]PropertyAmenity, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyAmenities, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyAmenity
	for rows.Next() {
		var i PropertyAmenity
		if err := rows.Scan(&i.PropertyID, &i.Amenity, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyById = `-- name: GetPropertyById :one
SELECT id, owner_id, name, area, number_of_floors, year_built, orientation, full_address, district, city, lat, lng, type, created_at, updated_at FROM properties WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPropertyById(ctx context.Context, id uuid.UUID) (Property, error) {
	row := q.db.QueryRowContext(ctx, getPropertyById, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Area,
		&i.NumberOfFloors,
		&i.YearBuilt,
		&i.Orientation,
		&i.FullAddress,
		&i.District,
		&i.City,
		&i.Lat,
		&i.Lng,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyByOwnerId = `-- name: GetPropertyByOwnerId :many
SELECT id, owner_id, name, area, number_of_floors, year_built, orientation, full_address, district, city, lat, lng, type, created_at, updated_at FROM properties WHERE owner_id = $1
`

func (q *Queries) GetPropertyByOwnerId(ctx context.Context, ownerID uuid.UUID) ([]Property, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Property
	for rows.Next() {
		var i Property
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Area,
			&i.NumberOfFloors,
			&i.YearBuilt,
			&i.Orientation,
			&i.FullAddress,
			&i.District,
			&i.City,
			&i.Lat,
			&i.Lng,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyFeatures = `-- name: GetPropertyFeatures :many
SELECT property_id, feature, description FROM property_feature WHERE property_id = $1
`

func (q *Queries) GetPropertyFeatures(ctx context.Context, propertyID uuid.UUID) ([]PropertyFeature, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyFeatures, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyFeature
	for rows.Next() {
		var i PropertyFeature
		if err := rows.Scan(&i.PropertyID, &i.Feature, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyMedium = `-- name: GetPropertyMedium :many
SELECT id, property_id, url, type FROM property_media WHERE property_id = $1
`

func (q *Queries) GetPropertyMedium(ctx context.Context, propertyID uuid.UUID) ([]PropertyMedium, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyMedium, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyMedium
	for rows.Next() {
		var i PropertyMedium
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.Url,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyTags = `-- name: GetPropertyTags :many
SELECT id, property_id, tag FROM property_tag WHERE property_id = $1
`

func (q *Queries) GetPropertyTags(ctx context.Context, propertyID uuid.UUID) ([]PropertyTag, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyTags, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyTag
	for rows.Next() {
		var i PropertyTag
		if err := rows.Scan(&i.ID, &i.PropertyID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProperty = `-- name: UpdateProperty :exec
UPDATE properties SET
  name = coalesce($2, name),
  area = coalesce($3, area),
  number_of_floors = coalesce($4, number_of_floors),
  year_built = coalesce($5, year_built),
  orientation = coalesce($6, orientation),
  full_address = coalesce($7, full_address),
  district = coalesce($8, district),
  city = coalesce($9, city),
  lat = coalesce($10, lat),
  lng = coalesce($11, lng),
  updated_at = NOW()
WHERE id = $1
`

type UpdatePropertyParams struct {
	ID             uuid.UUID       `json:"id"`
	Name           sql.NullString  `json:"name"`
	Area           sql.NullFloat64 `json:"area"`
	NumberOfFloors sql.NullInt32   `json:"number_of_floors"`
	YearBuilt      sql.NullInt32   `json:"year_built"`
	Orientation    sql.NullString  `json:"orientation"`
	FullAddress    sql.NullString  `json:"full_address"`
	District       sql.NullString  `json:"district"`
	City           sql.NullString  `json:"city"`
	Lat            sql.NullFloat64 `json:"lat"`
	Lng            sql.NullFloat64 `json:"lng"`
}

func (q *Queries) UpdateProperty(ctx context.Context, arg UpdatePropertyParams) error {
	_, err := q.db.ExecContext(ctx, updateProperty,
		arg.ID,
		arg.Name,
		arg.Area,
		arg.NumberOfFloors,
		arg.YearBuilt,
		arg.Orientation,
		arg.FullAddress,
		arg.District,
		arg.City,
		arg.Lat,
		arg.Lng,
	)
	return err
}
