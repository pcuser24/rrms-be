// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "Session" ("id", "userId", "sessionToken", "expires", "user_agent", "client_ip", "created_at")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, "sessionToken", "userId", expires, user_agent, client_ip, is_blocked, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID   `json:"id"`
	Userid       uuid.UUID   `json:"userid"`
	Sessiontoken string      `json:"sessiontoken"`
	Expires      time.Time   `json:"expires"`
	UserAgent    pgtype.Text `json:"user_agent"`
	ClientIp     pgtype.Text `json:"client_ip"`
	CreatedAt    time.Time   `json:"created_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Userid,
		arg.Sessiontoken,
		arg.Expires,
		arg.UserAgent,
		arg.ClientIp,
		arg.CreatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionToken,
		&i.UserId,
		&i.Expires,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (
  email, 
  password, 
  created_at, 
  updated_at,
  first_name,
  last_name
) VALUES (
  $1, 
  $2, 
  NOW(), 
  NOW(),
  $3,
  $4
) RETURNING id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f, first_name, last_name, phone, avatar, address, city, district, ward
`

type CreateUserParams struct {
	Email     string      `json:"email"`
	Password  pgtype.Text `json:"password"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Avatar,
		&i.Address,
		&i.City,
		&i.District,
		&i.Ward,
	)
	return i, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, "sessionToken", "userId", expires, user_agent, client_ip, is_blocked, created_at FROM "Session" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionToken,
		&i.UserId,
		&i.Expires,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f, first_name, last_name, phone, avatar, address, city, district, ward FROM "User" WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Avatar,
		&i.Address,
		&i.City,
		&i.District,
		&i.Ward,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f, first_name, last_name, phone, avatar, address, city, district, ward FROM "User" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Avatar,
		&i.Address,
		&i.City,
		&i.District,
		&i.Ward,
	)
	return i, err
}

const updateSessionBlockingStatus = `-- name: UpdateSessionBlockingStatus :exec
UPDATE "Session" SET is_blocked = $1 WHERE id = $2
`

type UpdateSessionBlockingStatusParams struct {
	IsBlocked bool      `json:"is_blocked"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateSessionBlockingStatus(ctx context.Context, arg UpdateSessionBlockingStatusParams) error {
	_, err := q.db.Exec(ctx, updateSessionBlockingStatus, arg.IsBlocked, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "User" SET 
  email = coalesce($3, email), 
  password = coalesce($4, password), 
  first_name = coalesce($5, first_name),
  last_name = coalesce($6, last_name),
  phone = coalesce($7, phone),
  avatar = coalesce($8, avatar),
  address = coalesce($9, address),
  city = coalesce($10, city),
  district = coalesce($11, district),
  ward = coalesce($12, ward),
  updated_at = NOW(),
  updated_by = $1
WHERE id = $2
`

type UpdateUserParams struct {
	UpdatedBy pgtype.UUID `json:"updated_by"`
	ID        uuid.UUID   `json:"id"`
	Email     pgtype.Text `json:"email"`
	Password  pgtype.Text `json:"password"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Phone     pgtype.Text `json:"phone"`
	Avatar    pgtype.Text `json:"avatar"`
	Address   pgtype.Text `json:"address"`
	City      pgtype.Text `json:"city"`
	District  pgtype.Text `json:"district"`
	Ward      pgtype.Text `json:"ward"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.UpdatedBy,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Avatar,
		arg.Address,
		arg.City,
		arg.District,
		arg.Ward,
	)
	return err
}
