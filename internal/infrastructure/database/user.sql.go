// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f FROM "User" WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f FROM "User" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "User" (email, password, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, email, password, group_id, created_at, updated_at, created_by, updated_by, deleted_f
`

type InsertUserParams struct {
	Email    string         `json:"email"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.GroupID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedF,
	)
	return i, err
}
