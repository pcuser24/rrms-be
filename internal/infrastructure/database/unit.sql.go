// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: unit.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkUnitOwnership = `-- name: CheckUnitOwnership :one
SELECT count(*) FROM units WHERE units.id = $1 AND property_id IN (SELECT properties.id FROM properties WHERE owner_id = $2) LIMIT 1
`

type CheckUnitOwnershipParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) CheckUnitOwnership(ctx context.Context, arg CheckUnitOwnershipParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUnitOwnership, arg.ID, arg.OwnerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (
  property_id,
  name,
  area,
  floor,
  has_balcony,
  number_of_living_rooms,
  number_of_bedrooms,
  number_of_bathrooms,
  number_of_toilets,
  number_of_kitchens,
  type,
  created_at,
  updated_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  NOW(),
  NOW()
) RETURNING id, property_id, name, area, floor, has_balcony, number_of_living_rooms, number_of_bedrooms, number_of_bathrooms, number_of_toilets, number_of_kitchens, type, created_at, updated_at
`

type CreateUnitParams struct {
	PropertyID          uuid.UUID      `json:"property_id"`
	Name                sql.NullString `json:"name"`
	Area                float32        `json:"area"`
	Floor               sql.NullInt32  `json:"floor"`
	HasBalcony          sql.NullBool   `json:"has_balcony"`
	NumberOfLivingRooms sql.NullInt32  `json:"number_of_living_rooms"`
	NumberOfBedrooms    sql.NullInt32  `json:"number_of_bedrooms"`
	NumberOfBathrooms   sql.NullInt32  `json:"number_of_bathrooms"`
	NumberOfToilets     sql.NullInt32  `json:"number_of_toilets"`
	NumberOfKitchens    sql.NullInt32  `json:"number_of_kitchens"`
	Type                UNITTYPE       `json:"type"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, createUnit,
		arg.PropertyID,
		arg.Name,
		arg.Area,
		arg.Floor,
		arg.HasBalcony,
		arg.NumberOfLivingRooms,
		arg.NumberOfBedrooms,
		arg.NumberOfBathrooms,
		arg.NumberOfToilets,
		arg.NumberOfKitchens,
		arg.Type,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Name,
		&i.Area,
		&i.Floor,
		&i.HasBalcony,
		&i.NumberOfLivingRooms,
		&i.NumberOfBedrooms,
		&i.NumberOfBathrooms,
		&i.NumberOfToilets,
		&i.NumberOfKitchens,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUnitAmenity = `-- name: CreateUnitAmenity :one
INSERT INTO unit_amenity (
  unit_id,
  amenity_id,
  description
) VALUES (
  $1,
  $2,
  $3
) RETURNING unit_id, amenity_id, description
`

type CreateUnitAmenityParams struct {
	UnitID      uuid.UUID      `json:"unit_id"`
	AmenityID   int64          `json:"amenity_id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateUnitAmenity(ctx context.Context, arg CreateUnitAmenityParams) (UnitAmenity, error) {
	row := q.db.QueryRowContext(ctx, createUnitAmenity, arg.UnitID, arg.AmenityID, arg.Description)
	var i UnitAmenity
	err := row.Scan(&i.UnitID, &i.AmenityID, &i.Description)
	return i, err
}

const createUnitMedia = `-- name: CreateUnitMedia :one
INSERT INTO unit_media (
  unit_id,
  url,
  type
) VALUES (
  $1,
  $2,
  $3
) RETURNING id, unit_id, url, type
`

type CreateUnitMediaParams struct {
	UnitID uuid.UUID `json:"unit_id"`
	Url    string    `json:"url"`
	Type   MEDIATYPE `json:"type"`
}

func (q *Queries) CreateUnitMedia(ctx context.Context, arg CreateUnitMediaParams) (UnitMedium, error) {
	row := q.db.QueryRowContext(ctx, createUnitMedia, arg.UnitID, arg.Url, arg.Type)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Url,
		&i.Type,
	)
	return i, err
}

const deleteAllUnitAmenity = `-- name: DeleteAllUnitAmenity :exec
DELETE FROM unit_amenity WHERE unit_id = $1
`

func (q *Queries) DeleteAllUnitAmenity(ctx context.Context, unitID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllUnitAmenity, unitID)
	return err
}

const deleteAllUnitMedia = `-- name: DeleteAllUnitMedia :exec
DELETE FROM unit_media WHERE unit_id = $1
`

func (q *Queries) DeleteAllUnitMedia(ctx context.Context, unitID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllUnitMedia, unitID)
	return err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units WHERE id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, id)
	return err
}

const getAllUnitAmenities = `-- name: GetAllUnitAmenities :many
SELECT id, amenity FROM u_amenities
`

func (q *Queries) GetAllUnitAmenities(ctx context.Context) ([]UAmenity, error) {
	rows, err := q.db.QueryContext(ctx, getAllUnitAmenities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UAmenity
	for rows.Next() {
		var i UAmenity
		if err := rows.Scan(&i.ID, &i.Amenity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitAmenities = `-- name: GetUnitAmenities :many
SELECT unit_id, amenity_id, description FROM unit_amenity WHERE unit_id = $1
`

func (q *Queries) GetUnitAmenities(ctx context.Context, unitID uuid.UUID) ([]UnitAmenity, error) {
	rows, err := q.db.QueryContext(ctx, getUnitAmenities, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitAmenity
	for rows.Next() {
		var i UnitAmenity
		if err := rows.Scan(&i.UnitID, &i.AmenityID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitById = `-- name: GetUnitById :one
SELECT id, property_id, name, area, floor, has_balcony, number_of_living_rooms, number_of_bedrooms, number_of_bathrooms, number_of_toilets, number_of_kitchens, type, created_at, updated_at FROM units WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUnitById(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRowContext(ctx, getUnitById, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.Name,
		&i.Area,
		&i.Floor,
		&i.HasBalcony,
		&i.NumberOfLivingRooms,
		&i.NumberOfBedrooms,
		&i.NumberOfBathrooms,
		&i.NumberOfToilets,
		&i.NumberOfKitchens,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnitMedia = `-- name: GetUnitMedia :many
SELECT id, unit_id, url, type FROM unit_media WHERE unit_id = $1
`

func (q *Queries) GetUnitMedia(ctx context.Context, unitID uuid.UUID) ([]UnitMedium, error) {
	rows, err := q.db.QueryContext(ctx, getUnitMedia, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitMedium
	for rows.Next() {
		var i UnitMedium
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.Url,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitsOfProperty = `-- name: GetUnitsOfProperty :many
SELECT id, property_id, name, area, floor, has_balcony, number_of_living_rooms, number_of_bedrooms, number_of_bathrooms, number_of_toilets, number_of_kitchens, type, created_at, updated_at FROM units WHERE property_id = $1
`

func (q *Queries) GetUnitsOfProperty(ctx context.Context, propertyID uuid.UUID) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, getUnitsOfProperty, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.Name,
			&i.Area,
			&i.Floor,
			&i.HasBalcony,
			&i.NumberOfLivingRooms,
			&i.NumberOfBedrooms,
			&i.NumberOfBathrooms,
			&i.NumberOfToilets,
			&i.NumberOfKitchens,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnit = `-- name: UpdateUnit :exec
UPDATE units SET
  name = coalesce($2, name),
  area = coalesce($3, area),
  floor = coalesce($4, floor),
  has_balcony = coalesce($5, has_balcony),
  number_of_living_rooms = coalesce($6, number_of_living_rooms),
  number_of_bedrooms = coalesce($7, number_of_bedrooms),
  number_of_bathrooms = coalesce($8, number_of_bathrooms),
  number_of_toilets = coalesce($9, number_of_toilets),
  number_of_kitchens = coalesce($10, number_of_kitchens),
  updated_at = NOW()
WHERE id = $1
`

type UpdateUnitParams struct {
	ID                  uuid.UUID       `json:"id"`
	Name                sql.NullString  `json:"name"`
	Area                sql.NullFloat64 `json:"area"`
	Floor               sql.NullInt32   `json:"floor"`
	HasBalcony          sql.NullBool    `json:"has_balcony"`
	NumberOfLivingRooms sql.NullInt32   `json:"number_of_living_rooms"`
	NumberOfBedrooms    sql.NullInt32   `json:"number_of_bedrooms"`
	NumberOfBathrooms   sql.NullInt32   `json:"number_of_bathrooms"`
	NumberOfToilets     sql.NullInt32   `json:"number_of_toilets"`
	NumberOfKitchens    sql.NullInt32   `json:"number_of_kitchens"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) error {
	_, err := q.db.ExecContext(ctx, updateUnit,
		arg.ID,
		arg.Name,
		arg.Area,
		arg.Floor,
		arg.HasBalcony,
		arg.NumberOfLivingRooms,
		arg.NumberOfBedrooms,
		arg.NumberOfBathrooms,
		arg.NumberOfToilets,
		arg.NumberOfKitchens,
	)
	return err
}
