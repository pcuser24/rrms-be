// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rental.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkPreRentalVisibility = `-- name: CheckPreRentalVisibility :one
SELECT count(*) > 0 FROM prerentals 
WHERE 
  id = $1 
  AND (
    tenant_id = $2 
    OR EXISTS (
      SELECT 1 FROM property_managers 
      WHERE 
        property_managers.property_id = prerentals.property_id 
        AND property_managers.manager_id = $2
      )
  )
`

type CheckPreRentalVisibilityParams struct {
	ID     int64       `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) CheckPreRentalVisibility(ctx context.Context, arg CheckPreRentalVisibilityParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkPreRentalVisibility, arg.ID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const checkRentalVisibility = `-- name: CheckRentalVisibility :one
SELECT count(*) > 0 FROM rentals 
WHERE 
  id = $1 
  AND (
    tenant_id = $2 
    OR EXISTS (
      SELECT 1 FROM property_managers 
      WHERE 
        property_managers.property_id = rentals.property_id 
        AND property_managers.manager_id = $2
      )
  )
`

type CheckRentalVisibilityParams struct {
	ID     int64       `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) CheckRentalVisibility(ctx context.Context, arg CheckRentalVisibilityParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkRentalVisibility, arg.ID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createPreRental = `-- name: CreatePreRental :one
INSERT INTO prerentals (
  application_id,
  creator_id,
  property_id,
  unit_id,
  profile_image,
  
  tenant_id,
  tenant_type,
  tenant_name,
  tenant_phone,
  tenant_email,
  organization_name,
  organization_hq_address,

  start_date,
  movein_date,
  rental_period,

  payment_type,

  rental_price,
  rental_payment_basis,
  rental_intention,
  notice_period,
  grace_period,
  late_payment_penalty_scheme,
  late_payment_penalty_amount,

  electricity_setup_by,
  electricity_payment_type,
  electricity_price,
  electricity_customer_code,
  electricity_provider,
  water_setup_by,
  water_payment_type,
  water_price,
  water_customer_code,
  water_provider,

  note,

  coaps,
  minors,
  pets,
  services,
  policies
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,

  $13,
  $14,
  $15,

  $16,

  $17,
  $18,
  $19,
  $20,
  $21,
  $22,
  $23,

  $24,
  $25,
  $26,
  $27,
  $28,
  $29,
  $30,
  $31,
  $32,
  $33,
  
  $34,

  $35,
  $36,
  $37,
  $38,
  $39
) RETURNING id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, coaps, minors, pets, services, policies, created_at
`

type CreatePreRentalParams struct {
	ApplicationID            pgtype.Int8                  `json:"application_id"`
	CreatorID                uuid.UUID                    `json:"creator_id"`
	PropertyID               uuid.UUID                    `json:"property_id"`
	UnitID                   uuid.UUID                    `json:"unit_id"`
	ProfileImage             string                       `json:"profile_image"`
	TenantID                 pgtype.UUID                  `json:"tenant_id"`
	TenantType               TENANTTYPE                   `json:"tenant_type"`
	TenantName               string                       `json:"tenant_name"`
	TenantPhone              string                       `json:"tenant_phone"`
	TenantEmail              string                       `json:"tenant_email"`
	OrganizationName         pgtype.Text                  `json:"organization_name"`
	OrganizationHqAddress    pgtype.Text                  `json:"organization_hq_address"`
	StartDate                pgtype.Date                  `json:"start_date"`
	MoveinDate               pgtype.Date                  `json:"movein_date"`
	RentalPeriod             int32                        `json:"rental_period"`
	PaymentType              NullRENTALPAYMENTTYPE        `json:"payment_type"`
	RentalPrice              float32                      `json:"rental_price"`
	RentalPaymentBasis       int32                        `json:"rental_payment_basis"`
	RentalIntention          string                       `json:"rental_intention"`
	NoticePeriod             pgtype.Int4                  `json:"notice_period"`
	GracePeriod              pgtype.Int4                  `json:"grace_period"`
	LatePaymentPenaltyScheme NullLATEPAYMENTPENALTYSCHEME `json:"late_payment_penalty_scheme"`
	LatePaymentPenaltyAmount pgtype.Float4                `json:"late_payment_penalty_amount"`
	ElectricitySetupBy       string                       `json:"electricity_setup_by"`
	ElectricityPaymentType   pgtype.Text                  `json:"electricity_payment_type"`
	ElectricityPrice         pgtype.Float4                `json:"electricity_price"`
	ElectricityCustomerCode  pgtype.Text                  `json:"electricity_customer_code"`
	ElectricityProvider      pgtype.Text                  `json:"electricity_provider"`
	WaterSetupBy             string                       `json:"water_setup_by"`
	WaterPaymentType         pgtype.Text                  `json:"water_payment_type"`
	WaterPrice               pgtype.Float4                `json:"water_price"`
	WaterCustomerCode        pgtype.Text                  `json:"water_customer_code"`
	WaterProvider            pgtype.Text                  `json:"water_provider"`
	Note                     pgtype.Text                  `json:"note"`
	Coaps                    []byte                       `json:"coaps"`
	Minors                   []byte                       `json:"minors"`
	Pets                     []byte                       `json:"pets"`
	Services                 []byte                       `json:"services"`
	Policies                 []byte                       `json:"policies"`
}

func (q *Queries) CreatePreRental(ctx context.Context, arg CreatePreRentalParams) (Prerental, error) {
	row := q.db.QueryRow(ctx, createPreRental,
		arg.ApplicationID,
		arg.CreatorID,
		arg.PropertyID,
		arg.UnitID,
		arg.ProfileImage,
		arg.TenantID,
		arg.TenantType,
		arg.TenantName,
		arg.TenantPhone,
		arg.TenantEmail,
		arg.OrganizationName,
		arg.OrganizationHqAddress,
		arg.StartDate,
		arg.MoveinDate,
		arg.RentalPeriod,
		arg.PaymentType,
		arg.RentalPrice,
		arg.RentalPaymentBasis,
		arg.RentalIntention,
		arg.NoticePeriod,
		arg.GracePeriod,
		arg.LatePaymentPenaltyScheme,
		arg.LatePaymentPenaltyAmount,
		arg.ElectricitySetupBy,
		arg.ElectricityPaymentType,
		arg.ElectricityPrice,
		arg.ElectricityCustomerCode,
		arg.ElectricityProvider,
		arg.WaterSetupBy,
		arg.WaterPaymentType,
		arg.WaterPrice,
		arg.WaterCustomerCode,
		arg.WaterProvider,
		arg.Note,
		arg.Coaps,
		arg.Minors,
		arg.Pets,
		arg.Services,
		arg.Policies,
	)
	var i Prerental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.OrganizationName,
		&i.OrganizationHqAddress,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.PaymentType,
		&i.RentalPrice,
		&i.RentalPaymentBasis,
		&i.RentalIntention,
		&i.NoticePeriod,
		&i.GracePeriod,
		&i.LatePaymentPenaltyScheme,
		&i.LatePaymentPenaltyAmount,
		&i.ElectricitySetupBy,
		&i.ElectricityPaymentType,
		&i.ElectricityCustomerCode,
		&i.ElectricityProvider,
		&i.ElectricityPrice,
		&i.WaterSetupBy,
		&i.WaterPaymentType,
		&i.WaterCustomerCode,
		&i.WaterProvider,
		&i.WaterPrice,
		&i.Note,
		&i.Coaps,
		&i.Minors,
		&i.Pets,
		&i.Services,
		&i.Policies,
		&i.CreatedAt,
	)
	return i, err
}

const createRental = `-- name: CreateRental :one
INSERT INTO rentals (
  application_id,
  creator_id,
  property_id,
  unit_id,
  profile_image,
  
  tenant_id,
  tenant_type,
  tenant_name,
  tenant_phone,
  tenant_email,
  organization_name,
  organization_hq_address,

  start_date,
  movein_date,
  rental_period,

  payment_type,

  rental_price,
  rental_payment_basis,
  rental_intention,
  notice_period,
  grace_period,
  late_payment_penalty_scheme,
  late_payment_penalty_amount,

  electricity_setup_by,
  electricity_payment_type,
  electricity_price,
  electricity_customer_code,
  electricity_provider,
  water_setup_by,
  water_payment_type,
  water_price,
  water_customer_code,
  water_provider,

  note
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,

  $13,
  $14,
  $15,

  $16,

  $17,
  $18,
  $19,
  $20,
  $21,
  $22,
  $23,

  $24,
  $25,
  $26,
  $27,
  $28,
  $29,
  $30,
  $31,
  $32,
  $33,

  -- sqlc.arg(rental_payment_grace_period),
  -- sqlc.narg(rental_payment_late_fee_percentage),
  
  $34
) RETURNING id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, status, created_at, updated_at
`

type CreateRentalParams struct {
	ApplicationID            pgtype.Int8                  `json:"application_id"`
	CreatorID                uuid.UUID                    `json:"creator_id"`
	PropertyID               uuid.UUID                    `json:"property_id"`
	UnitID                   uuid.UUID                    `json:"unit_id"`
	ProfileImage             string                       `json:"profile_image"`
	TenantID                 pgtype.UUID                  `json:"tenant_id"`
	TenantType               TENANTTYPE                   `json:"tenant_type"`
	TenantName               string                       `json:"tenant_name"`
	TenantPhone              string                       `json:"tenant_phone"`
	TenantEmail              string                       `json:"tenant_email"`
	OrganizationName         pgtype.Text                  `json:"organization_name"`
	OrganizationHqAddress    pgtype.Text                  `json:"organization_hq_address"`
	StartDate                pgtype.Date                  `json:"start_date"`
	MoveinDate               pgtype.Date                  `json:"movein_date"`
	RentalPeriod             int32                        `json:"rental_period"`
	PaymentType              NullRENTALPAYMENTTYPE        `json:"payment_type"`
	RentalPrice              float32                      `json:"rental_price"`
	RentalPaymentBasis       int32                        `json:"rental_payment_basis"`
	RentalIntention          string                       `json:"rental_intention"`
	NoticePeriod             pgtype.Int4                  `json:"notice_period"`
	GracePeriod              pgtype.Int4                  `json:"grace_period"`
	LatePaymentPenaltyScheme NullLATEPAYMENTPENALTYSCHEME `json:"late_payment_penalty_scheme"`
	LatePaymentPenaltyAmount pgtype.Float4                `json:"late_payment_penalty_amount"`
	ElectricitySetupBy       string                       `json:"electricity_setup_by"`
	ElectricityPaymentType   pgtype.Text                  `json:"electricity_payment_type"`
	ElectricityPrice         pgtype.Float4                `json:"electricity_price"`
	ElectricityCustomerCode  pgtype.Text                  `json:"electricity_customer_code"`
	ElectricityProvider      pgtype.Text                  `json:"electricity_provider"`
	WaterSetupBy             string                       `json:"water_setup_by"`
	WaterPaymentType         pgtype.Text                  `json:"water_payment_type"`
	WaterPrice               pgtype.Float4                `json:"water_price"`
	WaterCustomerCode        pgtype.Text                  `json:"water_customer_code"`
	WaterProvider            pgtype.Text                  `json:"water_provider"`
	Note                     pgtype.Text                  `json:"note"`
}

func (q *Queries) CreateRental(ctx context.Context, arg CreateRentalParams) (Rental, error) {
	row := q.db.QueryRow(ctx, createRental,
		arg.ApplicationID,
		arg.CreatorID,
		arg.PropertyID,
		arg.UnitID,
		arg.ProfileImage,
		arg.TenantID,
		arg.TenantType,
		arg.TenantName,
		arg.TenantPhone,
		arg.TenantEmail,
		arg.OrganizationName,
		arg.OrganizationHqAddress,
		arg.StartDate,
		arg.MoveinDate,
		arg.RentalPeriod,
		arg.PaymentType,
		arg.RentalPrice,
		arg.RentalPaymentBasis,
		arg.RentalIntention,
		arg.NoticePeriod,
		arg.GracePeriod,
		arg.LatePaymentPenaltyScheme,
		arg.LatePaymentPenaltyAmount,
		arg.ElectricitySetupBy,
		arg.ElectricityPaymentType,
		arg.ElectricityPrice,
		arg.ElectricityCustomerCode,
		arg.ElectricityProvider,
		arg.WaterSetupBy,
		arg.WaterPaymentType,
		arg.WaterPrice,
		arg.WaterCustomerCode,
		arg.WaterProvider,
		arg.Note,
	)
	var i Rental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.OrganizationName,
		&i.OrganizationHqAddress,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.PaymentType,
		&i.RentalPrice,
		&i.RentalPaymentBasis,
		&i.RentalIntention,
		&i.NoticePeriod,
		&i.GracePeriod,
		&i.LatePaymentPenaltyScheme,
		&i.LatePaymentPenaltyAmount,
		&i.ElectricitySetupBy,
		&i.ElectricityPaymentType,
		&i.ElectricityCustomerCode,
		&i.ElectricityProvider,
		&i.ElectricityPrice,
		&i.WaterSetupBy,
		&i.WaterPaymentType,
		&i.WaterCustomerCode,
		&i.WaterProvider,
		&i.WaterPrice,
		&i.Note,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRentalCoap = `-- name: CreateRentalCoap :one
INSERT INTO rental_coaps (
  rental_id,
  full_name,
  dob,
  job,
  income,
  email,
  phone,
  description
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
) RETURNING rental_id, full_name, dob, job, income, email, phone, description
`

type CreateRentalCoapParams struct {
	RentalID    int64       `json:"rental_id"`
	FullName    pgtype.Text `json:"full_name"`
	Dob         pgtype.Date `json:"dob"`
	Job         pgtype.Text `json:"job"`
	Income      pgtype.Int4 `json:"income"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRentalCoap(ctx context.Context, arg CreateRentalCoapParams) (RentalCoap, error) {
	row := q.db.QueryRow(ctx, createRentalCoap,
		arg.RentalID,
		arg.FullName,
		arg.Dob,
		arg.Job,
		arg.Income,
		arg.Email,
		arg.Phone,
		arg.Description,
	)
	var i RentalCoap
	err := row.Scan(
		&i.RentalID,
		&i.FullName,
		&i.Dob,
		&i.Job,
		&i.Income,
		&i.Email,
		&i.Phone,
		&i.Description,
	)
	return i, err
}

const createRentalMinor = `-- name: CreateRentalMinor :one
INSERT INTO "rental_minors" (
  "rental_id",
  "full_name",
  "dob",
  "email",
  "phone",
  "description"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
) RETURNING rental_id, full_name, dob, email, phone, description
`

type CreateRentalMinorParams struct {
	RentalID    int64       `json:"rental_id"`
	FullName    string      `json:"full_name"`
	Dob         pgtype.Date `json:"dob"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateRentalMinor(ctx context.Context, arg CreateRentalMinorParams) (RentalMinor, error) {
	row := q.db.QueryRow(ctx, createRentalMinor,
		arg.RentalID,
		arg.FullName,
		arg.Dob,
		arg.Email,
		arg.Phone,
		arg.Description,
	)
	var i RentalMinor
	err := row.Scan(
		&i.RentalID,
		&i.FullName,
		&i.Dob,
		&i.Email,
		&i.Phone,
		&i.Description,
	)
	return i, err
}

const createRentalPet = `-- name: CreateRentalPet :one
INSERT INTO "rental_pets" (
  "rental_id",
  "type",
  "weight",
  "description"
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING rental_id, type, weight, description
`

type CreateRentalPetParams struct {
	RentalID    int64         `json:"rental_id"`
	Type        string        `json:"type"`
	Weight      pgtype.Float4 `json:"weight"`
	Description pgtype.Text   `json:"description"`
}

func (q *Queries) CreateRentalPet(ctx context.Context, arg CreateRentalPetParams) (RentalPet, error) {
	row := q.db.QueryRow(ctx, createRentalPet,
		arg.RentalID,
		arg.Type,
		arg.Weight,
		arg.Description,
	)
	var i RentalPet
	err := row.Scan(
		&i.RentalID,
		&i.Type,
		&i.Weight,
		&i.Description,
	)
	return i, err
}

const createRentalPolicy = `-- name: CreateRentalPolicy :one
INSERT INTO "rental_policies" (
  "rental_id",
  "title",
  "content"
) VALUES (
  $1,
  $2,
  $3
) RETURNING rental_id, title, content
`

type CreateRentalPolicyParams struct {
	RentalID int64  `json:"rental_id"`
	Title    string `json:"title"`
	Content  string `json:"content"`
}

func (q *Queries) CreateRentalPolicy(ctx context.Context, arg CreateRentalPolicyParams) (RentalPolicy, error) {
	row := q.db.QueryRow(ctx, createRentalPolicy, arg.RentalID, arg.Title, arg.Content)
	var i RentalPolicy
	err := row.Scan(&i.RentalID, &i.Title, &i.Content)
	return i, err
}

const createRentalService = `-- name: CreateRentalService :one
INSERT INTO "rental_services" (
  "rental_id",
  "name",
  "setup_by",
  "provider",
  "price"
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
) RETURNING id, rental_id, name, setup_by, provider, price
`

type CreateRentalServiceParams struct {
	RentalID int64         `json:"rental_id"`
	Name     string        `json:"name"`
	SetupBy  string        `json:"setup_by"`
	Provider pgtype.Text   `json:"provider"`
	Price    pgtype.Float4 `json:"price"`
}

func (q *Queries) CreateRentalService(ctx context.Context, arg CreateRentalServiceParams) (RentalService, error) {
	row := q.db.QueryRow(ctx, createRentalService,
		arg.RentalID,
		arg.Name,
		arg.SetupBy,
		arg.Provider,
		arg.Price,
	)
	var i RentalService
	err := row.Scan(
		&i.ID,
		&i.RentalID,
		&i.Name,
		&i.SetupBy,
		&i.Provider,
		&i.Price,
	)
	return i, err
}

const deletePreRental = `-- name: DeletePreRental :exec
DELETE FROM prerentals WHERE id = $1
`

func (q *Queries) DeletePreRental(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePreRental, id)
	return err
}

const deleteRental = `-- name: DeleteRental :exec
DELETE FROM rentals WHERE id = $1
`

func (q *Queries) DeleteRental(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRental, id)
	return err
}

const getManagedPreRentals = `-- name: GetManagedPreRentals :many
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, coaps, minors, pets, services, policies, created_at FROM prerentals WHERE 
EXISTS (
  SELECT 1 FROM property_managers WHERE manager_id = $3 AND prerentals.property_id = property_managers.property_id
) ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetManagedPreRentalsParams struct {
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetManagedPreRentals(ctx context.Context, arg GetManagedPreRentalsParams) ([]Prerental, error) {
	rows, err := q.db.Query(ctx, getManagedPreRentals, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prerental
	for rows.Next() {
		var i Prerental
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PropertyID,
			&i.UnitID,
			&i.ApplicationID,
			&i.TenantID,
			&i.ProfileImage,
			&i.TenantType,
			&i.TenantName,
			&i.TenantPhone,
			&i.TenantEmail,
			&i.OrganizationName,
			&i.OrganizationHqAddress,
			&i.StartDate,
			&i.MoveinDate,
			&i.RentalPeriod,
			&i.PaymentType,
			&i.RentalPrice,
			&i.RentalPaymentBasis,
			&i.RentalIntention,
			&i.NoticePeriod,
			&i.GracePeriod,
			&i.LatePaymentPenaltyScheme,
			&i.LatePaymentPenaltyAmount,
			&i.ElectricitySetupBy,
			&i.ElectricityPaymentType,
			&i.ElectricityCustomerCode,
			&i.ElectricityProvider,
			&i.ElectricityPrice,
			&i.WaterSetupBy,
			&i.WaterPaymentType,
			&i.WaterCustomerCode,
			&i.WaterProvider,
			&i.WaterPrice,
			&i.Note,
			&i.Coaps,
			&i.Minors,
			&i.Pets,
			&i.Services,
			&i.Policies,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getManagedRentals = `-- name: GetManagedRentals :many
SELECT id FROM rentals 
WHERE 
  property_id IN (SELECT property_id FROM property_managers WHERE manager_id = $3)
  AND CASE
    WHEN $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period < CURRENT_DATE OR status <> 'INPROGRESS'
    WHEN NOT $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period >= CURRENT_DATE AND status = 'INPROGRESS'
  END
ORDER BY
  created_at DESC
LIMIT $1 OFFSET $2
`

type GetManagedRentalsParams struct {
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
	UserID  uuid.UUID `json:"user_id"`
	Expired bool      `json:"expired"`
}

func (q *Queries) GetManagedRentals(ctx context.Context, arg GetManagedRentalsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getManagedRentals,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.Expired,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyRentals = `-- name: GetMyRentals :many
SELECT id 
FROM rentals 
WHERE 
  tenant_id = $3
  AND CASE
    WHEN $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period < CURRENT_DATE OR status <> 'INPROGRESS'
    WHEN NOT $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period >= CURRENT_DATE AND status = 'INPROGRESS'
  END
ORDER BY
  created_at DESC
LIMIT $1 OFFSET $2
`

type GetMyRentalsParams struct {
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
	UserID  pgtype.UUID `json:"user_id"`
	Expired bool        `json:"expired"`
}

func (q *Queries) GetMyRentals(ctx context.Context, arg GetMyRentalsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getMyRentals,
		arg.Limit,
		arg.Offset,
		arg.UserID,
		arg.Expired,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreRental = `-- name: GetPreRental :one
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, coaps, minors, pets, services, policies, created_at FROM prerentals WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPreRental(ctx context.Context, id int64) (Prerental, error) {
	row := q.db.QueryRow(ctx, getPreRental, id)
	var i Prerental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.OrganizationName,
		&i.OrganizationHqAddress,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.PaymentType,
		&i.RentalPrice,
		&i.RentalPaymentBasis,
		&i.RentalIntention,
		&i.NoticePeriod,
		&i.GracePeriod,
		&i.LatePaymentPenaltyScheme,
		&i.LatePaymentPenaltyAmount,
		&i.ElectricitySetupBy,
		&i.ElectricityPaymentType,
		&i.ElectricityCustomerCode,
		&i.ElectricityProvider,
		&i.ElectricityPrice,
		&i.WaterSetupBy,
		&i.WaterPaymentType,
		&i.WaterCustomerCode,
		&i.WaterProvider,
		&i.WaterPrice,
		&i.Note,
		&i.Coaps,
		&i.Minors,
		&i.Pets,
		&i.Services,
		&i.Policies,
		&i.CreatedAt,
	)
	return i, err
}

const getPreRentalsToTenant = `-- name: GetPreRentalsToTenant :many
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, coaps, minors, pets, services, policies, created_at FROM prerentals WHERE tenant_id = $3 ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetPreRentalsToTenantParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetPreRentalsToTenant(ctx context.Context, arg GetPreRentalsToTenantParams) ([]Prerental, error) {
	rows, err := q.db.Query(ctx, getPreRentalsToTenant, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prerental
	for rows.Next() {
		var i Prerental
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PropertyID,
			&i.UnitID,
			&i.ApplicationID,
			&i.TenantID,
			&i.ProfileImage,
			&i.TenantType,
			&i.TenantName,
			&i.TenantPhone,
			&i.TenantEmail,
			&i.OrganizationName,
			&i.OrganizationHqAddress,
			&i.StartDate,
			&i.MoveinDate,
			&i.RentalPeriod,
			&i.PaymentType,
			&i.RentalPrice,
			&i.RentalPaymentBasis,
			&i.RentalIntention,
			&i.NoticePeriod,
			&i.GracePeriod,
			&i.LatePaymentPenaltyScheme,
			&i.LatePaymentPenaltyAmount,
			&i.ElectricitySetupBy,
			&i.ElectricityPaymentType,
			&i.ElectricityCustomerCode,
			&i.ElectricityProvider,
			&i.ElectricityPrice,
			&i.WaterSetupBy,
			&i.WaterPaymentType,
			&i.WaterCustomerCode,
			&i.WaterProvider,
			&i.WaterPrice,
			&i.Note,
			&i.Coaps,
			&i.Minors,
			&i.Pets,
			&i.Services,
			&i.Policies,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRental = `-- name: GetRental :one
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, status, created_at, updated_at FROM rentals WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRental(ctx context.Context, id int64) (Rental, error) {
	row := q.db.QueryRow(ctx, getRental, id)
	var i Rental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.OrganizationName,
		&i.OrganizationHqAddress,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.PaymentType,
		&i.RentalPrice,
		&i.RentalPaymentBasis,
		&i.RentalIntention,
		&i.NoticePeriod,
		&i.GracePeriod,
		&i.LatePaymentPenaltyScheme,
		&i.LatePaymentPenaltyAmount,
		&i.ElectricitySetupBy,
		&i.ElectricityPaymentType,
		&i.ElectricityCustomerCode,
		&i.ElectricityProvider,
		&i.ElectricityPrice,
		&i.WaterSetupBy,
		&i.WaterPaymentType,
		&i.WaterCustomerCode,
		&i.WaterProvider,
		&i.WaterPrice,
		&i.Note,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRentalByApplicationId = `-- name: GetRentalByApplicationId :one
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_phone, tenant_email, organization_name, organization_hq_address, start_date, movein_date, rental_period, payment_type, rental_price, rental_payment_basis, rental_intention, notice_period, grace_period, late_payment_penalty_scheme, late_payment_penalty_amount, electricity_setup_by, electricity_payment_type, electricity_customer_code, electricity_provider, electricity_price, water_setup_by, water_payment_type, water_customer_code, water_provider, water_price, note, status, created_at, updated_at FROM rentals WHERE application_id = $1 LIMIT 1
`

func (q *Queries) GetRentalByApplicationId(ctx context.Context, applicationID pgtype.Int8) (Rental, error) {
	row := q.db.QueryRow(ctx, getRentalByApplicationId, applicationID)
	var i Rental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.OrganizationName,
		&i.OrganizationHqAddress,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.PaymentType,
		&i.RentalPrice,
		&i.RentalPaymentBasis,
		&i.RentalIntention,
		&i.NoticePeriod,
		&i.GracePeriod,
		&i.LatePaymentPenaltyScheme,
		&i.LatePaymentPenaltyAmount,
		&i.ElectricitySetupBy,
		&i.ElectricityPaymentType,
		&i.ElectricityCustomerCode,
		&i.ElectricityProvider,
		&i.ElectricityPrice,
		&i.WaterSetupBy,
		&i.WaterPaymentType,
		&i.WaterCustomerCode,
		&i.WaterProvider,
		&i.WaterPrice,
		&i.Note,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRentalCoapsByRentalID = `-- name: GetRentalCoapsByRentalID :many
SELECT rental_id, full_name, dob, job, income, email, phone, description FROM rental_coaps WHERE rental_id = $1
`

func (q *Queries) GetRentalCoapsByRentalID(ctx context.Context, rentalID int64) ([]RentalCoap, error) {
	rows, err := q.db.Query(ctx, getRentalCoapsByRentalID, rentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentalCoap
	for rows.Next() {
		var i RentalCoap
		if err := rows.Scan(
			&i.RentalID,
			&i.FullName,
			&i.Dob,
			&i.Job,
			&i.Income,
			&i.Email,
			&i.Phone,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalMinorsByRentalID = `-- name: GetRentalMinorsByRentalID :many
SELECT rental_id, full_name, dob, email, phone, description FROM rental_minors WHERE rental_id = $1
`

func (q *Queries) GetRentalMinorsByRentalID(ctx context.Context, rentalID int64) ([]RentalMinor, error) {
	rows, err := q.db.Query(ctx, getRentalMinorsByRentalID, rentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentalMinor
	for rows.Next() {
		var i RentalMinor
		if err := rows.Scan(
			&i.RentalID,
			&i.FullName,
			&i.Dob,
			&i.Email,
			&i.Phone,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalPetsByRentalID = `-- name: GetRentalPetsByRentalID :many
SELECT rental_id, type, weight, description FROM rental_pets WHERE rental_id = $1
`

func (q *Queries) GetRentalPetsByRentalID(ctx context.Context, rentalID int64) ([]RentalPet, error) {
	rows, err := q.db.Query(ctx, getRentalPetsByRentalID, rentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentalPet
	for rows.Next() {
		var i RentalPet
		if err := rows.Scan(
			&i.RentalID,
			&i.Type,
			&i.Weight,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalPoliciesByRentalID = `-- name: GetRentalPoliciesByRentalID :many
SELECT rental_id, title, content FROM rental_policies WHERE rental_id = $1
`

func (q *Queries) GetRentalPoliciesByRentalID(ctx context.Context, rentalID int64) ([]RentalPolicy, error) {
	rows, err := q.db.Query(ctx, getRentalPoliciesByRentalID, rentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentalPolicy
	for rows.Next() {
		var i RentalPolicy
		if err := rows.Scan(&i.RentalID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalServicesByRentalID = `-- name: GetRentalServicesByRentalID :many
SELECT id, rental_id, name, setup_by, provider, price FROM rental_services WHERE rental_id = $1
`

func (q *Queries) GetRentalServicesByRentalID(ctx context.Context, rentalID int64) ([]RentalService, error) {
	rows, err := q.db.Query(ctx, getRentalServicesByRentalID, rentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentalService
	for rows.Next() {
		var i RentalService
		if err := rows.Scan(
			&i.ID,
			&i.RentalID,
			&i.Name,
			&i.SetupBy,
			&i.Provider,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalSide = `-- name: GetRentalSide :one
SELECT 
  CASE 
    WHEN EXISTS (SELECT 1 FROM property_managers WHERE property_id = rentals.property_id AND manager_id = $2) THEN 'A'
    WHEN rentals.tenant_id = $2 THEN 'B'
    ELSE 'C'
  END AS side
FROM rentals
WHERE id = $1
`

type GetRentalSideParams struct {
	ID     int64     `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

// Get rental side: Side A (lanlord and managers) and Side B (tenant). Otherwise return C
func (q *Queries) GetRentalSide(ctx context.Context, arg GetRentalSideParams) (string, error) {
	row := q.db.QueryRow(ctx, getRentalSide, arg.ID, arg.UserID)
	var side string
	err := row.Scan(&side)
	return side, err
}

const getRentalsOfProperty = `-- name: GetRentalsOfProperty :many
SELECT id
FROM rentals
WHERE 
  property_id = $1
  AND CASE
    WHEN $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period < CURRENT_DATE OR status <> 'INPROGRESS'
    WHEN NOT $4::BOOLEAN THEN start_date + INTERVAL '1 month' * rental_period >= CURRENT_DATE AND status = 'INPROGRESS'
  END
ORDER BY
  created_at DESC
LIMIT $2 OFFSET $3
`

type GetRentalsOfPropertyParams struct {
	PropertyID uuid.UUID `json:"property_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
	Expired    bool      `json:"expired"`
}

func (q *Queries) GetRentalsOfProperty(ctx context.Context, arg GetRentalsOfPropertyParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getRentalsOfProperty,
		arg.PropertyID,
		arg.Limit,
		arg.Offset,
		arg.Expired,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRental = `-- name: UpdateRental :exec
UPDATE rentals SET
  tenant_id = coalesce($2, tenant_id),
  profile_image = coalesce($3, profile_image),
  tenant_type = coalesce($4, tenant_type),
  tenant_name = coalesce($5, tenant_name),
  tenant_phone = coalesce($6, tenant_phone),
  tenant_email = coalesce($7, tenant_email),
  organization_name = coalesce($8, organization_name),
  organization_hq_address = coalesce($9, organization_hq_address),
  start_date = coalesce($10, start_date),
  movein_date = coalesce($11, movein_date),
  rental_period = coalesce($12, rental_period),
  rental_price = coalesce($13, rental_price),
  rental_payment_basis = coalesce($14, rental_payment_basis),
  rental_intention = coalesce($15, rental_intention),
  notice_period = coalesce($16, notice_period),
  late_payment_penalty_scheme = coalesce($17, late_payment_penalty_scheme),
  late_payment_penalty_amount = coalesce($18, late_payment_penalty_amount),
  electricity_setup_by = coalesce($19, electricity_setup_by),
  electricity_payment_type = coalesce($20, electricity_payment_type),
  electricity_price = coalesce($21, electricity_price),
  electricity_customer_code = coalesce($22, electricity_customer_code),
  electricity_provider = coalesce($23, electricity_provider),
  water_setup_by = coalesce($24, water_setup_by),
  water_payment_type = coalesce($25, water_payment_type),
  water_price = coalesce($26, water_price),
  water_customer_code = coalesce($27, water_customer_code),
  water_provider = coalesce($28, water_provider),
  -- rental_payment_grace_period = coalesce(sqlc.narg(rental_payment_grace_period), rental_payment_grace_period),
  -- rental_payment_late_fee_percentage = coalesce(sqlc.narg(rental_payment_late_fee_percentage), rental_payment_late_fee_percentage),
  note = coalesce($29, note),
  updated_at = NOW()
WHERE id = $1
`

type UpdateRentalParams struct {
	ID                       int64                        `json:"id"`
	TenantID                 pgtype.UUID                  `json:"tenant_id"`
	ProfileImage             pgtype.Text                  `json:"profile_image"`
	TenantType               NullTENANTTYPE               `json:"tenant_type"`
	TenantName               pgtype.Text                  `json:"tenant_name"`
	TenantPhone              pgtype.Text                  `json:"tenant_phone"`
	TenantEmail              pgtype.Text                  `json:"tenant_email"`
	OrganizationName         pgtype.Text                  `json:"organization_name"`
	OrganizationHqAddress    pgtype.Text                  `json:"organization_hq_address"`
	StartDate                pgtype.Date                  `json:"start_date"`
	MoveinDate               pgtype.Date                  `json:"movein_date"`
	RentalPeriod             pgtype.Int4                  `json:"rental_period"`
	RentalPrice              pgtype.Float4                `json:"rental_price"`
	RentalPaymentBasis       pgtype.Int4                  `json:"rental_payment_basis"`
	RentalIntention          pgtype.Text                  `json:"rental_intention"`
	NoticePeriod             pgtype.Int4                  `json:"notice_period"`
	LatePaymentPenaltyScheme NullLATEPAYMENTPENALTYSCHEME `json:"late_payment_penalty_scheme"`
	LatePaymentPenaltyAmount pgtype.Float4                `json:"late_payment_penalty_amount"`
	ElectricitySetupBy       pgtype.Text                  `json:"electricity_setup_by"`
	ElectricityPaymentType   pgtype.Text                  `json:"electricity_payment_type"`
	ElectricityPrice         pgtype.Float4                `json:"electricity_price"`
	ElectricityCustomerCode  pgtype.Text                  `json:"electricity_customer_code"`
	ElectricityProvider      pgtype.Text                  `json:"electricity_provider"`
	WaterSetupBy             pgtype.Text                  `json:"water_setup_by"`
	WaterPaymentType         pgtype.Text                  `json:"water_payment_type"`
	WaterPrice               pgtype.Float4                `json:"water_price"`
	WaterCustomerCode        pgtype.Text                  `json:"water_customer_code"`
	WaterProvider            pgtype.Text                  `json:"water_provider"`
	Note                     pgtype.Text                  `json:"note"`
}

func (q *Queries) UpdateRental(ctx context.Context, arg UpdateRentalParams) error {
	_, err := q.db.Exec(ctx, updateRental,
		arg.ID,
		arg.TenantID,
		arg.ProfileImage,
		arg.TenantType,
		arg.TenantName,
		arg.TenantPhone,
		arg.TenantEmail,
		arg.OrganizationName,
		arg.OrganizationHqAddress,
		arg.StartDate,
		arg.MoveinDate,
		arg.RentalPeriod,
		arg.RentalPrice,
		arg.RentalPaymentBasis,
		arg.RentalIntention,
		arg.NoticePeriod,
		arg.LatePaymentPenaltyScheme,
		arg.LatePaymentPenaltyAmount,
		arg.ElectricitySetupBy,
		arg.ElectricityPaymentType,
		arg.ElectricityPrice,
		arg.ElectricityCustomerCode,
		arg.ElectricityProvider,
		arg.WaterSetupBy,
		arg.WaterPaymentType,
		arg.WaterPrice,
		arg.WaterCustomerCode,
		arg.WaterProvider,
		arg.Note,
	)
	return err
}
