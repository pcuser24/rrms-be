// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rental.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPreRental = `-- name: CreatePreRental :one
INSERT INTO prerentals (
  application_id,
  creator_id,
  tenant_id,
  profile_image,
  property_id,
  unit_id,
  tenant_type,
  tenant_name,
  tenant_dob,
  tenant_identity,
  tenant_phone,
  tenant_email,
  tenant_address,
  contract_type,
  contract_content,
  contract_last_update_by,
  land_area,
  unit_area,
  start_date,
  movein_date,
  rental_period,
  rental_price,
  note
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  $10,
  $11,
  $12,
  $13,
  $14,
  $15,
  $2,
  $16,
  $17,
  $18,
  $19,
  $20,
  $21,
  $22
) RETURNING id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_identity, tenant_dob, tenant_phone, tenant_email, tenant_address, contract_type, contract_content, contract_last_update_at, contract_last_update_by, land_area, unit_area, start_date, movein_date, rental_period, rental_price, status, note
`

type CreatePreRentalParams struct {
	ApplicationID   pgtype.Int8      `json:"application_id"`
	CreatorID       uuid.UUID        `json:"creator_id"`
	TenantID        pgtype.UUID      `json:"tenant_id"`
	ProfileImage    string           `json:"profile_image"`
	PropertyID      uuid.UUID        `json:"property_id"`
	UnitID          uuid.UUID        `json:"unit_id"`
	TenantType      TENANTTYPE       `json:"tenant_type"`
	TenantName      string           `json:"tenant_name"`
	TenantDob       pgtype.Date      `json:"tenant_dob"`
	TenantIdentity  string           `json:"tenant_identity"`
	TenantPhone     string           `json:"tenant_phone"`
	TenantEmail     string           `json:"tenant_email"`
	TenantAddress   pgtype.Text      `json:"tenant_address"`
	ContractType    NullCONTRACTTYPE `json:"contract_type"`
	ContractContent pgtype.Text      `json:"contract_content"`
	LandArea        float32          `json:"land_area"`
	UnitArea        float32          `json:"unit_area"`
	StartDate       pgtype.Date      `json:"start_date"`
	MoveinDate      pgtype.Date      `json:"movein_date"`
	RentalPeriod    int32            `json:"rental_period"`
	RentalPrice     float32          `json:"rental_price"`
	Note            pgtype.Text      `json:"note"`
}

func (q *Queries) CreatePreRental(ctx context.Context, arg CreatePreRentalParams) (Prerental, error) {
	row := q.db.QueryRow(ctx, createPreRental,
		arg.ApplicationID,
		arg.CreatorID,
		arg.TenantID,
		arg.ProfileImage,
		arg.PropertyID,
		arg.UnitID,
		arg.TenantType,
		arg.TenantName,
		arg.TenantDob,
		arg.TenantIdentity,
		arg.TenantPhone,
		arg.TenantEmail,
		arg.TenantAddress,
		arg.ContractType,
		arg.ContractContent,
		arg.LandArea,
		arg.UnitArea,
		arg.StartDate,
		arg.MoveinDate,
		arg.RentalPeriod,
		arg.RentalPrice,
		arg.Note,
	)
	var i Prerental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantIdentity,
		&i.TenantDob,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.TenantAddress,
		&i.ContractType,
		&i.ContractContent,
		&i.ContractLastUpdateAt,
		&i.ContractLastUpdateBy,
		&i.LandArea,
		&i.UnitArea,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.RentalPrice,
		&i.Status,
		&i.Note,
	)
	return i, err
}

const createPreRentalCoap = `-- name: CreatePreRentalCoap :one
INSERT INTO prerental_coaps (
  prerental_id,
  full_name,
  dob,
  job,
  income,
  email,
  phone,
  description
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
) RETURNING prerental_id, full_name, dob, job, income, email, phone, description
`

type CreatePreRentalCoapParams struct {
	PrerentalID int64       `json:"prerental_id"`
	FullName    pgtype.Text `json:"full_name"`
	Dob         pgtype.Date `json:"dob"`
	Job         pgtype.Text `json:"job"`
	Income      pgtype.Int4 `json:"income"`
	Email       pgtype.Text `json:"email"`
	Phone       pgtype.Text `json:"phone"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreatePreRentalCoap(ctx context.Context, arg CreatePreRentalCoapParams) (PrerentalCoap, error) {
	row := q.db.QueryRow(ctx, createPreRentalCoap,
		arg.PrerentalID,
		arg.FullName,
		arg.Dob,
		arg.Job,
		arg.Income,
		arg.Email,
		arg.Phone,
		arg.Description,
	)
	var i PrerentalCoap
	err := row.Scan(
		&i.PrerentalID,
		&i.FullName,
		&i.Dob,
		&i.Job,
		&i.Income,
		&i.Email,
		&i.Phone,
		&i.Description,
	)
	return i, err
}

const deletePreRental = `-- name: DeletePreRental :exec
DELETE FROM prerentals WHERE id = $1
`

func (q *Queries) DeletePreRental(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePreRental, id)
	return err
}

const getPreRental = `-- name: GetPreRental :one
SELECT id, creator_id, property_id, unit_id, application_id, tenant_id, profile_image, tenant_type, tenant_name, tenant_identity, tenant_dob, tenant_phone, tenant_email, tenant_address, contract_type, contract_content, contract_last_update_at, contract_last_update_by, land_area, unit_area, start_date, movein_date, rental_period, rental_price, status, note FROM prerentals WHERE id = $1
`

func (q *Queries) GetPreRental(ctx context.Context, id int64) (Prerental, error) {
	row := q.db.QueryRow(ctx, getPreRental, id)
	var i Prerental
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PropertyID,
		&i.UnitID,
		&i.ApplicationID,
		&i.TenantID,
		&i.ProfileImage,
		&i.TenantType,
		&i.TenantName,
		&i.TenantIdentity,
		&i.TenantDob,
		&i.TenantPhone,
		&i.TenantEmail,
		&i.TenantAddress,
		&i.ContractType,
		&i.ContractContent,
		&i.ContractLastUpdateAt,
		&i.ContractLastUpdateBy,
		&i.LandArea,
		&i.UnitArea,
		&i.StartDate,
		&i.MoveinDate,
		&i.RentalPeriod,
		&i.RentalPrice,
		&i.Status,
		&i.Note,
	)
	return i, err
}

const getPreRentalCoapByPreRentalID = `-- name: GetPreRentalCoapByPreRentalID :many
SELECT prerental_id, full_name, dob, job, income, email, phone, description FROM prerental_coaps WHERE prerental_id = $1
`

func (q *Queries) GetPreRentalCoapByPreRentalID(ctx context.Context, prerentalID int64) ([]PrerentalCoap, error) {
	rows, err := q.db.Query(ctx, getPreRentalCoapByPreRentalID, prerentalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrerentalCoap
	for rows.Next() {
		var i PrerentalCoap
		if err := rows.Scan(
			&i.PrerentalID,
			&i.FullName,
			&i.Dob,
			&i.Job,
			&i.Income,
			&i.Email,
			&i.Phone,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreRentalContract = `-- name: GetPreRentalContract :one
SELECT id, contract_type, contract_content, contract_last_update_at, contract_last_update_by FROM prerentals WHERE id = $1
`

type GetPreRentalContractRow struct {
	ID                   int64              `json:"id"`
	ContractType         NullCONTRACTTYPE   `json:"contract_type"`
	ContractContent      pgtype.Text        `json:"contract_content"`
	ContractLastUpdateAt pgtype.Timestamptz `json:"contract_last_update_at"`
	ContractLastUpdateBy pgtype.UUID        `json:"contract_last_update_by"`
}

func (q *Queries) GetPreRentalContract(ctx context.Context, id int64) (GetPreRentalContractRow, error) {
	row := q.db.QueryRow(ctx, getPreRentalContract, id)
	var i GetPreRentalContractRow
	err := row.Scan(
		&i.ID,
		&i.ContractType,
		&i.ContractContent,
		&i.ContractLastUpdateAt,
		&i.ContractLastUpdateBy,
	)
	return i, err
}

const updatePreRental = `-- name: UpdatePreRental :exec
UPDATE prerentals SET
  tenant_id = coalesce($2, tenant_id),
  profile_image = coalesce($3, profile_image),
  tenant_type = coalesce($4, tenant_type),
  tenant_name = coalesce($5, tenant_name),
  tenant_dob = coalesce($6, tenant_dob),
  tenant_identity = coalesce($7, tenant_identity),
  tenant_phone = coalesce($8, tenant_phone),
  tenant_email = coalesce($9, tenant_email),
  tenant_address = coalesce($10, tenant_address),
  start_date = coalesce($11, start_date),
  movein_date = coalesce($12, movein_date),
  rental_period = coalesce($13, rental_period),
  rental_price = coalesce($14, rental_price),
  note = coalesce($15, note),
  status = coalesce($16, status)
WHERE id = $1
`

type UpdatePreRentalParams struct {
	ID             int64               `json:"id"`
	TenantID       pgtype.UUID         `json:"tenant_id"`
	ProfileImage   pgtype.Text         `json:"profile_image"`
	TenantType     NullTENANTTYPE      `json:"tenant_type"`
	TenantName     pgtype.Text         `json:"tenant_name"`
	TenantDob      pgtype.Date         `json:"tenant_dob"`
	TenantIdentity pgtype.Text         `json:"tenant_identity"`
	TenantPhone    pgtype.Text         `json:"tenant_phone"`
	TenantEmail    pgtype.Text         `json:"tenant_email"`
	TenantAddress  pgtype.Text         `json:"tenant_address"`
	StartDate      pgtype.Date         `json:"start_date"`
	MoveinDate     pgtype.Date         `json:"movein_date"`
	RentalPeriod   pgtype.Int4         `json:"rental_period"`
	RentalPrice    pgtype.Float4       `json:"rental_price"`
	Note           pgtype.Text         `json:"note"`
	Status         NullPRERENTALSTATUS `json:"status"`
}

func (q *Queries) UpdatePreRental(ctx context.Context, arg UpdatePreRentalParams) error {
	_, err := q.db.Exec(ctx, updatePreRental,
		arg.ID,
		arg.TenantID,
		arg.ProfileImage,
		arg.TenantType,
		arg.TenantName,
		arg.TenantDob,
		arg.TenantIdentity,
		arg.TenantPhone,
		arg.TenantEmail,
		arg.TenantAddress,
		arg.StartDate,
		arg.MoveinDate,
		arg.RentalPeriod,
		arg.RentalPrice,
		arg.Note,
		arg.Status,
	)
	return err
}

const updatePreRentalContract = `-- name: UpdatePreRentalContract :exec
UPDATE prerentals SET
  contract_type = coalesce($2, contract_type),
  contract_content = coalesce($3, contract_content),
  contract_last_update_at = NOW(),
  contract_last_update_by = $4
WHERE id = $1
`

type UpdatePreRentalContractParams struct {
	ID                   int64            `json:"id"`
	ContractType         NullCONTRACTTYPE `json:"contract_type"`
	ContractContent      pgtype.Text      `json:"contract_content"`
	ContractLastUpdateBy pgtype.UUID      `json:"contract_last_update_by"`
}

func (q *Queries) UpdatePreRentalContract(ctx context.Context, arg UpdatePreRentalContractParams) error {
	_, err := q.db.Exec(ctx, updatePreRentalContract,
		arg.ID,
		arg.ContractType,
		arg.ContractContent,
		arg.ContractLastUpdateBy,
	)
	return err
}
