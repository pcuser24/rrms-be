// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type APPLICATIONSTATUS string

const (
	APPLICATIONSTATUSPENDING               APPLICATIONSTATUS = "PENDING"
	APPLICATIONSTATUSAPPROVED              APPLICATIONSTATUS = "APPROVED"
	APPLICATIONSTATUSCONDITIONALLYAPPROVED APPLICATIONSTATUS = "CONDITIONALLY_APPROVED"
	APPLICATIONSTATUSREJECTED              APPLICATIONSTATUS = "REJECTED"
)

func (e *APPLICATIONSTATUS) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = APPLICATIONSTATUS(s)
	case string:
		*e = APPLICATIONSTATUS(s)
	default:
		return fmt.Errorf("unsupported scan type for APPLICATIONSTATUS: %T", src)
	}
	return nil
}

type NullAPPLICATIONSTATUS struct {
	APPLICATIONSTATUS APPLICATIONSTATUS `json:"APPLICATION_STATUS"`
	Valid             bool              `json:"valid"` // Valid is true if APPLICATIONSTATUS is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAPPLICATIONSTATUS) Scan(value interface{}) error {
	if value == nil {
		ns.APPLICATIONSTATUS, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.APPLICATIONSTATUS.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAPPLICATIONSTATUS) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.APPLICATIONSTATUS), nil
}

type MEDIATYPE string

const (
	MEDIATYPEIMAGE MEDIATYPE = "IMAGE"
	MEDIATYPEVIDEO MEDIATYPE = "VIDEO"
)

func (e *MEDIATYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MEDIATYPE(s)
	case string:
		*e = MEDIATYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for MEDIATYPE: %T", src)
	}
	return nil
}

type NullMEDIATYPE struct {
	MEDIATYPE MEDIATYPE `json:"MEDIATYPE"`
	Valid     bool      `json:"valid"` // Valid is true if MEDIATYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMEDIATYPE) Scan(value interface{}) error {
	if value == nil {
		ns.MEDIATYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MEDIATYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMEDIATYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MEDIATYPE), nil
}

type PROPERTYTYPE string

const (
	PROPERTYTYPEAPARTMENT PROPERTYTYPE = "APARTMENT"
	PROPERTYTYPEPRIVATE   PROPERTYTYPE = "PRIVATE"
	PROPERTYTYPETOWNHOUSE PROPERTYTYPE = "TOWNHOUSE"
	PROPERTYTYPESHOPHOUSE PROPERTYTYPE = "SHOPHOUSE"
	PROPERTYTYPEVILLA     PROPERTYTYPE = "VILLA"
	PROPERTYTYPEROOM      PROPERTYTYPE = "ROOM"
	PROPERTYTYPESTORE     PROPERTYTYPE = "STORE"
	PROPERTYTYPEOFFICE    PROPERTYTYPE = "OFFICE"
	PROPERTYTYPEBLOCK     PROPERTYTYPE = "BLOCK"
	PROPERTYTYPECOMPLEX   PROPERTYTYPE = "COMPLEX"
)

func (e *PROPERTYTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PROPERTYTYPE(s)
	case string:
		*e = PROPERTYTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for PROPERTYTYPE: %T", src)
	}
	return nil
}

type NullPROPERTYTYPE struct {
	PROPERTYTYPE PROPERTYTYPE `json:"PROPERTYTYPE"`
	Valid        bool         `json:"valid"` // Valid is true if PROPERTYTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPROPERTYTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.PROPERTYTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PROPERTYTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPROPERTYTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PROPERTYTYPE), nil
}

type UNITTYPE string

const (
	UNITTYPEROOM      UNITTYPE = "ROOM"
	UNITTYPEAPARTMENT UNITTYPE = "APARTMENT"
	UNITTYPESTUDIO    UNITTYPE = "STUDIO"
)

func (e *UNITTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UNITTYPE(s)
	case string:
		*e = UNITTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for UNITTYPE: %T", src)
	}
	return nil
}

type NullUNITTYPE struct {
	UNITTYPE UNITTYPE `json:"UNITTYPE"`
	Valid    bool     `json:"valid"` // Valid is true if UNITTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUNITTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.UNITTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UNITTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUNITTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UNITTYPE), nil
}

type Account struct {
	ID                uuid.UUID      `json:"id"`
	UserId            uuid.UUID      `json:"userId"`
	Type              string         `json:"type"`
	Provider          string         `json:"provider"`
	ProviderAccountId string         `json:"providerAccountId"`
	RefreshToken      sql.NullString `json:"refresh_token"`
	AccessToken       sql.NullString `json:"access_token"`
	ExpiresAt         sql.NullInt32  `json:"expires_at"`
	TokenType         sql.NullString `json:"token_type"`
	Scope             sql.NullString `json:"scope"`
	IDToken           sql.NullString `json:"id_token"`
	SessionState      sql.NullString `json:"session_state"`
}

type Application struct {
	ID                       int64             `json:"id"`
	CreatorID                uuid.UUID         `json:"creator_id"`
	ListingID                uuid.UUID         `json:"listing_id"`
	PropertyID               uuid.UUID         `json:"property_id"`
	UnitIds                  []uuid.UUID       `json:"unit_ids"`
	Status                   APPLICATIONSTATUS `json:"status"`
	CreatedAt                time.Time         `json:"created_at"`
	UpdatedAt                time.Time         `json:"updated_at"`
	FullName                 string            `json:"full_name"`
	Email                    string            `json:"email"`
	Phone                    string            `json:"phone"`
	Dob                      time.Time         `json:"dob"`
	ProfileImage             string            `json:"profile_image"`
	MoveinDate               time.Time         `json:"movein_date"`
	PreferredTerm            int32             `json:"preferred_term"`
	RhAddress                sql.NullString    `json:"rh_address"`
	RhCity                   sql.NullString    `json:"rh_city"`
	RhDistrict               sql.NullString    `json:"rh_district"`
	RhWard                   sql.NullString    `json:"rh_ward"`
	RhRentalDuration         sql.NullInt32     `json:"rh_rental_duration"`
	RhMonthlyPayment         sql.NullFloat64   `json:"rh_monthly_payment"`
	RhReasonForLeaving       sql.NullString    `json:"rh_reason_for_leaving"`
	EmploymentStatus         string            `json:"employment_status"`
	EmploymentCompanyName    sql.NullString    `json:"employment_company_name"`
	EmploymentPosition       sql.NullString    `json:"employment_position"`
	EmploymentMonthlyIncome  sql.NullFloat64   `json:"employment_monthly_income"`
	EmploymentComment        sql.NullString    `json:"employment_comment"`
	EmploymentProofsOfIncome []string          `json:"employment_proofs_of_income"`
	IdentityType             string            `json:"identity_type"`
	IdentityNumber           string            `json:"identity_number"`
	IdentityIssuedDate       time.Time         `json:"identity_issued_date"`
	IdentityIssuedBy         string            `json:"identity_issued_by"`
}

type ApplicationCoap struct {
	ApplicationID int64          `json:"application_id"`
	FullName      string         `json:"full_name"`
	Dob           time.Time      `json:"dob"`
	Job           string         `json:"job"`
	Income        int32          `json:"income"`
	Email         sql.NullString `json:"email"`
	Phone         sql.NullString `json:"phone"`
	Description   sql.NullString `json:"description"`
}

type ApplicationMinor struct {
	ApplicationID int64          `json:"application_id"`
	FullName      string         `json:"full_name"`
	Dob           time.Time      `json:"dob"`
	Email         sql.NullString `json:"email"`
	Phone         sql.NullString `json:"phone"`
	Description   sql.NullString `json:"description"`
}

type ApplicationPet struct {
	ApplicationID int64           `json:"application_id"`
	Type          string          `json:"type"`
	Weight        sql.NullFloat64 `json:"weight"`
	Description   sql.NullString  `json:"description"`
}

type ApplicationVehicle struct {
	ApplicationID int64          `json:"application_id"`
	Type          string         `json:"type"`
	Model         sql.NullString `json:"model"`
	Code          string         `json:"code"`
	Description   sql.NullString `json:"description"`
}

type Listing struct {
	ID          uuid.UUID `json:"id"`
	CreatorID   uuid.UUID `json:"creator_id"`
	PropertyID  uuid.UUID `json:"property_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	Phone       string    `json:"phone"`
	ContactType string    `json:"contact_type"`
	// Rental price per month in vietnamese dong
	Price           int64         `json:"price"`
	PriceNegotiable bool          `json:"price_negotiable"`
	SecurityDeposit sql.NullInt64 `json:"security_deposit"`
	// Lease term in months
	LeaseTerm         sql.NullInt32 `json:"lease_term"`
	PetsAllowed       sql.NullBool  `json:"pets_allowed"`
	NumberOfResidents sql.NullInt32 `json:"number_of_residents"`
	// Priority of the listing, range from 1 to 5, 1 is the lowest
	Priority  int32     `json:"priority"`
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	PostAt    time.Time `json:"post_at"`
	ExpiredAt time.Time `json:"expired_at"`
}

type ListingPolicy struct {
	ListingID uuid.UUID      `json:"listing_id"`
	PolicyID  int64          `json:"policy_id"`
	Note      sql.NullString `json:"note"`
}

type ListingUnit struct {
	ListingID uuid.UUID `json:"listing_id"`
	UnitID    uuid.UUID `json:"unit_id"`
}

// Security guard, Parking, Gym, ...
type PFeature struct {
	ID      int64  `json:"id"`
	Feature string `json:"feature"`
}

type Property struct {
	ID             uuid.UUID      `json:"id"`
	CreatorID      uuid.UUID      `json:"creator_id"`
	Name           string         `json:"name"`
	Building       sql.NullString `json:"building"`
	Project        sql.NullString `json:"project"`
	Area           float32        `json:"area"`
	NumberOfFloors sql.NullInt32  `json:"number_of_floors"`
	YearBuilt      sql.NullInt32  `json:"year_built"`
	// n,s,w,e,nw,ne,sw,se
	Orientation   sql.NullString  `json:"orientation"`
	EntranceWidth sql.NullFloat64 `json:"entrance_width"`
	Facade        sql.NullFloat64 `json:"facade"`
	FullAddress   string          `json:"full_address"`
	City          string          `json:"city"`
	District      string          `json:"district"`
	Ward          sql.NullString  `json:"ward"`
	Lat           sql.NullFloat64 `json:"lat"`
	Lng           sql.NullFloat64 `json:"lng"`
	PlaceUrl      string          `json:"place_url"`
	Description   sql.NullString  `json:"description"`
	Type          PROPERTYTYPE    `json:"type"`
	IsPublic      bool            `json:"is_public"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

type PropertyFeature struct {
	PropertyID  uuid.UUID      `json:"property_id"`
	FeatureID   int64          `json:"feature_id"`
	Description sql.NullString `json:"description"`
}

type PropertyManager struct {
	PropertyID uuid.UUID `json:"property_id"`
	ManagerID  uuid.UUID `json:"manager_id"`
	Role       string    `json:"role"`
}

type PropertyMedium struct {
	ID          int64          `json:"id"`
	PropertyID  uuid.UUID      `json:"property_id"`
	Url         string         `json:"url"`
	Type        MEDIATYPE      `json:"type"`
	Description sql.NullString `json:"description"`
}

type PropertyTag struct {
	ID         int64     `json:"id"`
	PropertyID uuid.UUID `json:"property_id"`
	Tag        string    `json:"tag"`
}

type RentalPolicy struct {
	ID     int64  `json:"id"`
	Policy string `json:"policy"`
}

type Session struct {
	ID           uuid.UUID      `json:"id"`
	SessionToken string         `json:"sessionToken"`
	UserId       uuid.UUID      `json:"userId"`
	Expires      time.Time      `json:"expires"`
	UserAgent    sql.NullString `json:"user_agent"`
	ClientIp     sql.NullString `json:"client_ip"`
	IsBlocked    bool           `json:"is_blocked"`
	CreatedAt    time.Time      `json:"created_at"`
}

// Air conditioner, Fridge, Washing machine, ...
type UAmenity struct {
	ID      int64  `json:"id"`
	Amenity string `json:"amenity"`
}

type Unit struct {
	ID                  uuid.UUID     `json:"id"`
	PropertyID          uuid.UUID     `json:"property_id"`
	Name                string        `json:"name"`
	Area                float32       `json:"area"`
	Floor               sql.NullInt32 `json:"floor"`
	Price               sql.NullInt64 `json:"price"`
	NumberOfLivingRooms sql.NullInt32 `json:"number_of_living_rooms"`
	NumberOfBedrooms    sql.NullInt32 `json:"number_of_bedrooms"`
	NumberOfBathrooms   sql.NullInt32 `json:"number_of_bathrooms"`
	NumberOfToilets     sql.NullInt32 `json:"number_of_toilets"`
	NumberOfBalconies   sql.NullInt32 `json:"number_of_balconies"`
	NumberOfKitchens    sql.NullInt32 `json:"number_of_kitchens"`
	Type                UNITTYPE      `json:"type"`
	CreatedAt           time.Time     `json:"created_at"`
	UpdatedAt           time.Time     `json:"updated_at"`
}

type UnitAmenity struct {
	UnitID      uuid.UUID      `json:"unit_id"`
	AmenityID   int64          `json:"amenity_id"`
	Description sql.NullString `json:"description"`
}

type UnitMedium struct {
	ID          int64          `json:"id"`
	UnitID      uuid.UUID      `json:"unit_id"`
	Url         string         `json:"url"`
	Type        MEDIATYPE      `json:"type"`
	Description sql.NullString `json:"description"`
}

// Bang user
type User struct {
	ID        uuid.UUID      `json:"id"`
	Email     string         `json:"email"`
	Password  sql.NullString `json:"password"`
	GroupID   uuid.NullUUID  `json:"group_id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	CreatedBy uuid.NullUUID  `json:"created_by"`
	UpdatedBy uuid.NullUUID  `json:"updated_by"`
	// 1: deleted, 0: not deleted
	DeletedF bool `json:"deleted_f"`
}

type VerificationToken struct {
	Identifier string    `json:"identifier"`
	Token      string    `json:"token"`
	Expires    time.Time `json:"expires"`
}
