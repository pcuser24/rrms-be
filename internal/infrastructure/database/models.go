// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type APPLICATIONSTATUS string

const (
	APPLICATIONSTATUSPENDING               APPLICATIONSTATUS = "PENDING"
	APPLICATIONSTATUSAPPROVED              APPLICATIONSTATUS = "APPROVED"
	APPLICATIONSTATUSCONDITIONALLYAPPROVED APPLICATIONSTATUS = "CONDITIONALLY_APPROVED"
	APPLICATIONSTATUSREJECTED              APPLICATIONSTATUS = "REJECTED"
	APPLICATIONSTATUSWITHDRAWN             APPLICATIONSTATUS = "WITHDRAWN"
)

func (e *APPLICATIONSTATUS) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = APPLICATIONSTATUS(s)
	case string:
		*e = APPLICATIONSTATUS(s)
	default:
		return fmt.Errorf("unsupported scan type for APPLICATIONSTATUS: %T", src)
	}
	return nil
}

type NullAPPLICATIONSTATUS struct {
	APPLICATIONSTATUS APPLICATIONSTATUS `json:"APPLICATION_STATUS"`
	Valid             bool              `json:"valid"` // Valid is true if APPLICATIONSTATUS is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAPPLICATIONSTATUS) Scan(value interface{}) error {
	if value == nil {
		ns.APPLICATIONSTATUS, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.APPLICATIONSTATUS.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAPPLICATIONSTATUS) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.APPLICATIONSTATUS), nil
}

type MEDIATYPE string

const (
	MEDIATYPEIMAGE MEDIATYPE = "IMAGE"
	MEDIATYPEVIDEO MEDIATYPE = "VIDEO"
)

func (e *MEDIATYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MEDIATYPE(s)
	case string:
		*e = MEDIATYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for MEDIATYPE: %T", src)
	}
	return nil
}

type NullMEDIATYPE struct {
	MEDIATYPE MEDIATYPE `json:"MEDIATYPE"`
	Valid     bool      `json:"valid"` // Valid is true if MEDIATYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMEDIATYPE) Scan(value interface{}) error {
	if value == nil {
		ns.MEDIATYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MEDIATYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMEDIATYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MEDIATYPE), nil
}

type PROPERTYTYPE string

const (
	PROPERTYTYPEAPARTMENT     PROPERTYTYPE = "APARTMENT"
	PROPERTYTYPEPRIVATE       PROPERTYTYPE = "PRIVATE"
	PROPERTYTYPEROOM          PROPERTYTYPE = "ROOM"
	PROPERTYTYPESTORE         PROPERTYTYPE = "STORE"
	PROPERTYTYPEOFFICE        PROPERTYTYPE = "OFFICE"
	PROPERTYTYPEMINIAPARTMENT PROPERTYTYPE = "MINIAPARTMENT"
)

func (e *PROPERTYTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PROPERTYTYPE(s)
	case string:
		*e = PROPERTYTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for PROPERTYTYPE: %T", src)
	}
	return nil
}

type NullPROPERTYTYPE struct {
	PROPERTYTYPE PROPERTYTYPE `json:"PROPERTYTYPE"`
	Valid        bool         `json:"valid"` // Valid is true if PROPERTYTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPROPERTYTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.PROPERTYTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PROPERTYTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPROPERTYTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PROPERTYTYPE), nil
}

type UNITTYPE string

const (
	UNITTYPEROOM      UNITTYPE = "ROOM"
	UNITTYPEAPARTMENT UNITTYPE = "APARTMENT"
	UNITTYPESTUDIO    UNITTYPE = "STUDIO"
)

func (e *UNITTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UNITTYPE(s)
	case string:
		*e = UNITTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for UNITTYPE: %T", src)
	}
	return nil
}

type NullUNITTYPE struct {
	UNITTYPE UNITTYPE `json:"UNITTYPE"`
	Valid    bool     `json:"valid"` // Valid is true if UNITTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUNITTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.UNITTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UNITTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUNITTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UNITTYPE), nil
}

type Account struct {
	ID                uuid.UUID   `json:"id"`
	UserId            uuid.UUID   `json:"userId"`
	Type              string      `json:"type"`
	Provider          string      `json:"provider"`
	ProviderAccountId string      `json:"providerAccountId"`
	RefreshToken      pgtype.Text `json:"refresh_token"`
	AccessToken       pgtype.Text `json:"access_token"`
	ExpiresAt         pgtype.Int4 `json:"expires_at"`
	TokenType         pgtype.Text `json:"token_type"`
	Scope             pgtype.Text `json:"scope"`
	IDToken           pgtype.Text `json:"id_token"`
	SessionState      pgtype.Text `json:"session_state"`
}

type Application struct {
	ID                      int64             `json:"id"`
	CreatorID               uuid.UUID         `json:"creator_id"`
	ListingID               uuid.UUID         `json:"listing_id"`
	PropertyID              uuid.UUID         `json:"property_id"`
	Status                  APPLICATIONSTATUS `json:"status"`
	CreatedAt               time.Time         `json:"created_at"`
	UpdatedAt               time.Time         `json:"updated_at"`
	FullName                string            `json:"full_name"`
	Email                   string            `json:"email"`
	Phone                   string            `json:"phone"`
	Dob                     time.Time         `json:"dob"`
	ProfileImage            string            `json:"profile_image"`
	MoveinDate              time.Time         `json:"movein_date"`
	PreferredTerm           int32             `json:"preferred_term"`
	RentalIntention         string            `json:"rental_intention"`
	RhAddress               pgtype.Text       `json:"rh_address"`
	RhCity                  pgtype.Text       `json:"rh_city"`
	RhDistrict              pgtype.Text       `json:"rh_district"`
	RhWard                  pgtype.Text       `json:"rh_ward"`
	RhRentalDuration        pgtype.Int4       `json:"rh_rental_duration"`
	RhMonthlyPayment        pgtype.Int8       `json:"rh_monthly_payment"`
	RhReasonForLeaving      pgtype.Text       `json:"rh_reason_for_leaving"`
	EmploymentStatus        string            `json:"employment_status"`
	EmploymentCompanyName   pgtype.Text       `json:"employment_company_name"`
	EmploymentPosition      pgtype.Text       `json:"employment_position"`
	EmploymentMonthlyIncome pgtype.Int8       `json:"employment_monthly_income"`
	EmploymentComment       pgtype.Text       `json:"employment_comment"`
	IdentityType            string            `json:"identity_type"`
	IdentityNumber          string            `json:"identity_number"`
}

type ApplicationCoap struct {
	ApplicationID int64       `json:"application_id"`
	FullName      string      `json:"full_name"`
	Dob           time.Time   `json:"dob"`
	Job           string      `json:"job"`
	Income        int32       `json:"income"`
	Email         pgtype.Text `json:"email"`
	Phone         pgtype.Text `json:"phone"`
	Description   pgtype.Text `json:"description"`
}

type ApplicationMinor struct {
	ApplicationID int64       `json:"application_id"`
	FullName      string      `json:"full_name"`
	Dob           time.Time   `json:"dob"`
	Email         pgtype.Text `json:"email"`
	Phone         pgtype.Text `json:"phone"`
	Description   pgtype.Text `json:"description"`
}

type ApplicationPet struct {
	ApplicationID int64         `json:"application_id"`
	Type          string        `json:"type"`
	Weight        pgtype.Float4 `json:"weight"`
	Description   pgtype.Text   `json:"description"`
}

type ApplicationUnit struct {
	ApplicationID int64     `json:"application_id"`
	UnitID        uuid.UUID `json:"unit_id"`
	ListingPrice  int64     `json:"listing_price"`
	OfferedPrice  int64     `json:"offered_price"`
}

type ApplicationVehicle struct {
	ApplicationID int64       `json:"application_id"`
	Type          string      `json:"type"`
	Model         pgtype.Text `json:"model"`
	Code          string      `json:"code"`
	Description   pgtype.Text `json:"description"`
}

type Listing struct {
	ID          uuid.UUID `json:"id"`
	CreatorID   uuid.UUID `json:"creator_id"`
	PropertyID  uuid.UUID `json:"property_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	Phone       string    `json:"phone"`
	ContactType string    `json:"contact_type"`
	// Rental price per month in vietnamese dong
	Price           int64       `json:"price"`
	PriceNegotiable bool        `json:"price_negotiable"`
	SecurityDeposit pgtype.Int8 `json:"security_deposit"`
	// Lease term in months
	LeaseTerm         pgtype.Int4 `json:"lease_term"`
	PetsAllowed       pgtype.Bool `json:"pets_allowed"`
	NumberOfResidents pgtype.Int4 `json:"number_of_residents"`
	// Priority of the listing, range from 1 to 5, 1 is the lowest
	Priority  int32     `json:"priority"`
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	// The time when the listing is expired. The listing is expired if the current time is greater than this time.
	ExpiredAt time.Time `json:"expired_at"`
}

type ListingPolicy struct {
	ListingID uuid.UUID   `json:"listing_id"`
	PolicyID  int64       `json:"policy_id"`
	Note      pgtype.Text `json:"note"`
}

type ListingUnit struct {
	ListingID uuid.UUID `json:"listing_id"`
	UnitID    uuid.UUID `json:"unit_id"`
	Price     int64     `json:"price"`
}

// Security guard, Parking, Gym, ...
type PFeature struct {
	ID      int64  `json:"id"`
	Feature string `json:"feature"`
}

type Property struct {
	ID             uuid.UUID   `json:"id"`
	CreatorID      uuid.UUID   `json:"creator_id"`
	Name           string      `json:"name"`
	Building       pgtype.Text `json:"building"`
	Project        pgtype.Text `json:"project"`
	Area           float32     `json:"area"`
	NumberOfFloors pgtype.Int4 `json:"number_of_floors"`
	YearBuilt      pgtype.Int4 `json:"year_built"`
	// n,s,w,e,nw,ne,sw,se
	Orientation   pgtype.Text   `json:"orientation"`
	EntranceWidth pgtype.Float4 `json:"entrance_width"`
	Facade        pgtype.Float4 `json:"facade"`
	FullAddress   string        `json:"full_address"`
	City          string        `json:"city"`
	District      string        `json:"district"`
	Ward          pgtype.Text   `json:"ward"`
	Lat           pgtype.Float8 `json:"lat"`
	Lng           pgtype.Float8 `json:"lng"`
	PrimaryImage  pgtype.Int8   `json:"primary_image"`
	Description   pgtype.Text   `json:"description"`
	Type          PROPERTYTYPE  `json:"type"`
	IsPublic      bool          `json:"is_public"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

type PropertyFeature struct {
	PropertyID  uuid.UUID   `json:"property_id"`
	FeatureID   int64       `json:"feature_id"`
	Description pgtype.Text `json:"description"`
}

type PropertyManager struct {
	PropertyID uuid.UUID `json:"property_id"`
	ManagerID  uuid.UUID `json:"manager_id"`
	Role       string    `json:"role"`
}

type PropertyMedium struct {
	ID          int64       `json:"id"`
	PropertyID  uuid.UUID   `json:"property_id"`
	Url         string      `json:"url"`
	Type        MEDIATYPE   `json:"type"`
	Description pgtype.Text `json:"description"`
}

type PropertyTag struct {
	ID         int64     `json:"id"`
	PropertyID uuid.UUID `json:"property_id"`
	Tag        string    `json:"tag"`
}

type RentalPolicy struct {
	ID     int64  `json:"id"`
	Policy string `json:"policy"`
}

type Session struct {
	ID           uuid.UUID   `json:"id"`
	SessionToken string      `json:"sessionToken"`
	UserId       uuid.UUID   `json:"userId"`
	Expires      time.Time   `json:"expires"`
	UserAgent    pgtype.Text `json:"user_agent"`
	ClientIp     pgtype.Text `json:"client_ip"`
	IsBlocked    bool        `json:"is_blocked"`
	CreatedAt    time.Time   `json:"created_at"`
}

// Air conditioner, Fridge, Washing machine, ...
type UAmenity struct {
	ID      int64  `json:"id"`
	Amenity string `json:"amenity"`
}

type Unit struct {
	ID                  uuid.UUID   `json:"id"`
	PropertyID          uuid.UUID   `json:"property_id"`
	Name                string      `json:"name"`
	Area                float32     `json:"area"`
	Floor               pgtype.Int4 `json:"floor"`
	NumberOfLivingRooms pgtype.Int4 `json:"number_of_living_rooms"`
	NumberOfBedrooms    pgtype.Int4 `json:"number_of_bedrooms"`
	NumberOfBathrooms   pgtype.Int4 `json:"number_of_bathrooms"`
	NumberOfToilets     pgtype.Int4 `json:"number_of_toilets"`
	NumberOfBalconies   pgtype.Int4 `json:"number_of_balconies"`
	NumberOfKitchens    pgtype.Int4 `json:"number_of_kitchens"`
	Type                UNITTYPE    `json:"type"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

type UnitAmenity struct {
	UnitID      uuid.UUID   `json:"unit_id"`
	AmenityID   int64       `json:"amenity_id"`
	Description pgtype.Text `json:"description"`
}

type UnitMedium struct {
	ID          int64       `json:"id"`
	UnitID      uuid.UUID   `json:"unit_id"`
	Url         string      `json:"url"`
	Type        MEDIATYPE   `json:"type"`
	Description pgtype.Text `json:"description"`
}

// User info table
type User struct {
	ID        uuid.UUID   `json:"id"`
	Email     string      `json:"email"`
	Password  pgtype.Text `json:"password"`
	GroupID   pgtype.UUID `json:"group_id"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	CreatedBy pgtype.UUID `json:"created_by"`
	UpdatedBy pgtype.UUID `json:"updated_by"`
	// 1: deleted, 0: not deleted
	DeletedF  bool        `json:"deleted_f"`
	FirstName string      `json:"first_name"`
	LastName  string      `json:"last_name"`
	Phone     pgtype.Text `json:"phone"`
	Avatar    pgtype.Text `json:"avatar"`
	Address   pgtype.Text `json:"address"`
	City      pgtype.Text `json:"city"`
	District  pgtype.Text `json:"district"`
	Ward      pgtype.Text `json:"ward"`
}

type VerificationToken struct {
	Identifier string    `json:"identifier"`
	Token      string    `json:"token"`
	Expires    time.Time `json:"expires"`
}
