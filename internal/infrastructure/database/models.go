// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type MEDIATYPE string

const (
	MEDIATYPEIMAGE MEDIATYPE = "IMAGE"
	MEDIATYPEVIDEO MEDIATYPE = "VIDEO"
)

func (e *MEDIATYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MEDIATYPE(s)
	case string:
		*e = MEDIATYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for MEDIATYPE: %T", src)
	}
	return nil
}

type NullMEDIATYPE struct {
	MEDIATYPE MEDIATYPE `json:"MEDIATYPE"`
	Valid     bool      `json:"valid"` // Valid is true if MEDIATYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMEDIATYPE) Scan(value interface{}) error {
	if value == nil {
		ns.MEDIATYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MEDIATYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMEDIATYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MEDIATYPE), nil
}

type PROPERTYTYPE string

const (
	PROPERTYTYPEAPARTMENT       PROPERTYTYPE = "APARTMENT"
	PROPERTYTYPESINGLERESIDENCE PROPERTYTYPE = "SINGLE_RESIDENCE"
	PROPERTYTYPEROOM            PROPERTYTYPE = "ROOM"
	PROPERTYTYPEBLOCK           PROPERTYTYPE = "BLOCK"
)

func (e *PROPERTYTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PROPERTYTYPE(s)
	case string:
		*e = PROPERTYTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for PROPERTYTYPE: %T", src)
	}
	return nil
}

type NullPROPERTYTYPE struct {
	PROPERTYTYPE PROPERTYTYPE `json:"PROPERTYTYPE"`
	Valid        bool         `json:"valid"` // Valid is true if PROPERTYTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPROPERTYTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.PROPERTYTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PROPERTYTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPROPERTYTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PROPERTYTYPE), nil
}

type UNITTYPE string

const (
	UNITTYPEROOM      UNITTYPE = "ROOM"
	UNITTYPEAPARTMENT UNITTYPE = "APARTMENT"
	UNITTYPESTUDIO    UNITTYPE = "STUDIO"
)

func (e *UNITTYPE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UNITTYPE(s)
	case string:
		*e = UNITTYPE(s)
	default:
		return fmt.Errorf("unsupported scan type for UNITTYPE: %T", src)
	}
	return nil
}

type NullUNITTYPE struct {
	UNITTYPE UNITTYPE `json:"UNITTYPE"`
	Valid    bool     `json:"valid"` // Valid is true if UNITTYPE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUNITTYPE) Scan(value interface{}) error {
	if value == nil {
		ns.UNITTYPE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UNITTYPE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUNITTYPE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UNITTYPE), nil
}

type Account struct {
	ID                uuid.UUID      `json:"id"`
	UserId            uuid.UUID      `json:"userId"`
	Type              string         `json:"type"`
	Provider          string         `json:"provider"`
	ProviderAccountId string         `json:"providerAccountId"`
	RefreshToken      sql.NullString `json:"refresh_token"`
	AccessToken       sql.NullString `json:"access_token"`
	ExpiresAt         sql.NullInt32  `json:"expires_at"`
	TokenType         sql.NullString `json:"token_type"`
	Scope             sql.NullString `json:"scope"`
	IDToken           sql.NullString `json:"id_token"`
	SessionState      sql.NullString `json:"session_state"`
}

type Listing struct {
	ID          uuid.UUID `json:"id"`
	CreatorID   uuid.UUID `json:"creator_id"`
	PropertyID  uuid.UUID `json:"property_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	// Rental price per month in vietnamese dong
	Price           int64 `json:"price"`
	SecurityDeposit int64 `json:"security_deposit"`
	// Lease term in months
	LeaseTerm         int32         `json:"lease_term"`
	PetsAllowed       sql.NullBool  `json:"pets_allowed"`
	NumberOfResidents sql.NullInt32 `json:"number_of_residents"`
	// Priority of the listing, range from 1 to 5, 1 is the lowest
	Priority  int32     `json:"priority"`
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	ExpiredAt time.Time `json:"expired_at"`
}

type ListingPolicy struct {
	ListingID uuid.UUID      `json:"listing_id"`
	PolicyID  int64          `json:"policy_id"`
	Note      sql.NullString `json:"note"`
}

type ListingUnit struct {
	ListingID uuid.UUID `json:"listing_id"`
	UnitID    uuid.UUID `json:"unit_id"`
}

// Elevator, Security camera, Pool, Yard, ...
type PAmenity struct {
	ID      int64  `json:"id"`
	Amenity string `json:"amenity"`
}

// Security guard, Parking, Gym, ...
type PFeature struct {
	ID      int64  `json:"id"`
	Feature string `json:"feature"`
}

type Property struct {
	ID             uuid.UUID     `json:"id"`
	OwnerID        uuid.UUID     `json:"owner_id"`
	Name           string        `json:"name"`
	Area           float32       `json:"area"`
	NumberOfFloors sql.NullInt32 `json:"number_of_floors"`
	YearBuilt      sql.NullInt32 `json:"year_built"`
	// n,s,w,e,nw,ne,sw,se
	Orientation sql.NullString `json:"orientation"`
	FullAddress string         `json:"full_address"`
	District    string         `json:"district"`
	City        string         `json:"city"`
	Lat         float64        `json:"lat"`
	Lng         float64        `json:"lng"`
	Type        PROPERTYTYPE   `json:"type"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

type PropertyAmenity struct {
	PropertyID  uuid.UUID      `json:"property_id"`
	AmenityID   int64          `json:"amenity_id"`
	Description sql.NullString `json:"description"`
}

type PropertyFeature struct {
	PropertyID  uuid.UUID      `json:"property_id"`
	FeatureID   int64          `json:"feature_id"`
	Description sql.NullString `json:"description"`
}

type PropertyMedium struct {
	ID         int64     `json:"id"`
	PropertyID uuid.UUID `json:"property_id"`
	Url        string    `json:"url"`
	Type       MEDIATYPE `json:"type"`
}

type PropertyTag struct {
	ID         int64     `json:"id"`
	PropertyID uuid.UUID `json:"property_id"`
	Tag        string    `json:"tag"`
}

type RentalPolicy struct {
	ID     int64  `json:"id"`
	Policy string `json:"policy"`
}

type Session struct {
	ID           uuid.UUID      `json:"id"`
	SessionToken string         `json:"sessionToken"`
	UserId       uuid.UUID      `json:"userId"`
	Expires      time.Time      `json:"expires"`
	UserAgent    sql.NullString `json:"user_agent"`
	ClientIp     sql.NullString `json:"client_ip"`
	IsBlocked    sql.NullBool   `json:"is_blocked"`
	CreatedAt    time.Time      `json:"created_at"`
}

// Air conditioner, Fridge, Washing machine, ...
type UAmenity struct {
	ID      int64  `json:"id"`
	Amenity string `json:"amenity"`
}

type Unit struct {
	ID                  uuid.UUID     `json:"id"`
	PropertyID          uuid.UUID     `json:"property_id"`
	Name                string        `json:"name"`
	Area                float32       `json:"area"`
	Floor               sql.NullInt32 `json:"floor"`
	HasBalcony          sql.NullBool  `json:"has_balcony"`
	NumberOfLivingRooms sql.NullInt32 `json:"number_of_living_rooms"`
	NumberOfBedrooms    sql.NullInt32 `json:"number_of_bedrooms"`
	NumberOfBathrooms   sql.NullInt32 `json:"number_of_bathrooms"`
	NumberOfToilets     sql.NullInt32 `json:"number_of_toilets"`
	NumberOfKitchens    sql.NullInt32 `json:"number_of_kitchens"`
	Type                UNITTYPE      `json:"type"`
	CreatedAt           time.Time     `json:"created_at"`
	UpdatedAt           time.Time     `json:"updated_at"`
}

type UnitAmenity struct {
	UnitID      uuid.UUID      `json:"unit_id"`
	AmenityID   int64          `json:"amenity_id"`
	Description sql.NullString `json:"description"`
}

type UnitMedium struct {
	ID     int64     `json:"id"`
	UnitID uuid.UUID `json:"unit_id"`
	Url    string    `json:"url"`
	Type   MEDIATYPE `json:"type"`
}

// Bang user
type User struct {
	ID        uuid.UUID      `json:"id"`
	Email     string         `json:"email"`
	Password  sql.NullString `json:"password"`
	GroupID   uuid.NullUUID  `json:"group_id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	CreatedBy uuid.NullUUID  `json:"created_by"`
	UpdatedBy uuid.NullUUID  `json:"updated_by"`
	// 1: deleted, 0: not deleted
	DeletedF bool `json:"deleted_f"`
}

type VerificationToken struct {
	Identifier string    `json:"identifier"`
	Token      string    `json:"token"`
	Expires    time.Time `json:"expires"`
}
